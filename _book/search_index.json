[["setup-for-elasticsearch-version-7.html", "Elasticsearch Fundamentals 1 Setup for Elasticsearch version 7 1.1 Download Elasticsearch 1.2 Getting started with Kibana 1.3 Setting up basic security for Elasticsearch and Kibana", " Elasticsearch Fundamentals Arie Twigt 1 Setup for Elasticsearch version 7 1.1 Download Elasticsearch 1.1.1 Download and unzip the Elasticsearch installation in your Home Directory Download Elasticsearch by visiting the following url: https://www.elastic.co/downloads/elasticsearch Choose for Windows rather than for the MSI. We are going to place and extract the file in our Home Directory: &gt; Your Home Directory is for example: This PC &gt; Windows (C:) &gt; Users &gt; arie . This is the folder in which you typically can find folders like My Documents, Downloads, Dropbox etc. Unzip the folder and extract it in the same directory. This is most likely the default option for unzipping the file: 1.1.2 Start Elasticsearch from the Command Line Now we have downloaded and extracte Elasticsearch, we can launch it from the command line: Open a new command line. This can be for example Command Prompt or Powershell In the command line, navigate to your Home Directory where your Elasticsearch instance is stored If the Elasticsearch directory is present, navigate into it. In the following example, we have downloaded Elasticsearch 7.14.0, so the commands would be: Navigate into the Elasticsearch directory cd elasticsearch-7.14.0 Start Elasticsearch bin\\elasticsearch The bin\\elasticsearch, if in the right folder, will launch the Elasticsearch instance We need to wait a minute or so before Elasticsearch is fully booted. To find out if Elasticsearch is succesfully booted, we can open a browser and navigate to localhost:9200. Checkout the output and the name of your cluster. By default this will similar to the name of your computer. 1.1.3 Changing basic settings in the Elasticsearch configuration Later in this course, we will change the configuration of the Elasticsearch instance. In this section, we will start with modifiying some basic settings in te configuration. We will start by chaning the name of the cluster. An Elasticsearch “cluster” is a collection of hardware that is operates as one Elasticsearch instance. Elasticsearch instances that consist of only one Node (machine) are also referred to as a “cluster”. Later in this course we will run a cluster that runs on multiple nodes. Change the default name of the Elasticsearch cluster: In the Command Line, close the running Elasticsearch instance Run Elasticsearch with a different node name and cluster name: bin\\elasticsearch -E node.name=my_node -E cluster.name=my_cluster Wait until Elasticsearch is fully started Check the output of the browser There is another, more sustainable, way of specifying the configuration of an Elasticsearch instance: Open your Explorer and navigate to the config directory which can be found in the Elasticsearch directory In this screenshot, for Elasticsearch version 7.14.0 this is Elasticsearch-7.14.0 &gt; config &gt; elasticsearch.yml You can open the elasticsearch.yml file with Notepad. Uncomment, which is removing the #, in the line in which the cluster.name property is defined. Change the default name to descriptive name you desire. In The case of this example, we have named it es-training-cluster. Save the elasticsearch.yml file If you did not have already done this, stop the running Elasticsearch instance in the command line. Start Elasticsearch again just with the regular command bin\\elasticsearch Keep in mind that in a real-world environment, the running Elasticsearch instance can be set as a service. It keeps on running this way. In this training we will simulate this by keeping, sometime multiple, instances of the Command Line open. 1.2 Getting started with Kibana 1.2.1 Interacting with Elasticsearch There are several ways to interact with our running Elasticsearch instance: Using curl operations from the Command Line Sending HTTP requests using the Elasticsearch API in a tool like Postman Using the Dev Tools in Kibana 1.2.2 Managing Elasticsearch in Kibana In this course we choose for the last option since we will be able to execute other actions in Kibana as well. Therefore, we first need to download Kibana https://www.elastic.co/downloads/kibana 1.2.3 Downloading and extracting Kibana Downloading and setting up Kibana is similar to the steps we executed for Elasticsearch: Choose for your operating system, which is in the case of our examples Windows. Just as with Elasticsearch, make sure to move the download from your Downloads folder to your Home Directory. Also, just like Elasticsearch, extract the contents of the zip-file 1.2.4 Launching Kibana Open a new Command Line and navigate to the Kibana directory. cd kibana-7.14-windows-x86_64 For convenience you can change the name of the directory by removing the windowspart Start Kibana bin\\kibana After a minute or so, Kibana is started. You can use Kibana by navigating to localhost:5601 in your browser. 1.2.5 Using Dev Tools for CRUD-operations in Kibana Now we have started Kibana, we can use the Dev Tools to execute CRUD-actions to Elasticsearch: In the Left Pane scroll down to find the Dev Tools tab In the Dev Tools tab we can execute several operations in Kibana, also CRUD-operations. First we will use a command that lists all the current indices in Elasticsearch: GET _cat/indices?v Press the play button to execute the command We will get a list of indices in Elasticsearch. These indices are available by default. These are default indices that have mostly to do with logging and administration. We also notice a message about setting up security. This will be our next step. Kibana is working now, however, it is not secure yet. When you are following these labs on your local machine, this is not quite a big deal. However, when you are planning to configure Elasticsearch on a server that is reachable for other users, you do want to have at least the basic security setup. Otherwise, just anybody can log into your Elasticsearch cluster and Kibana and even modify settings or documents. In the next step, we are going to setup basic security for Elasticsearch and Kibana. 1.3 Setting up basic security for Elasticsearch and Kibana Setting up the basic security settings for Elasticsearch and Kibana is a combination of command line operations and settings in the configuration files of both Elasticsearch in Kibana: 1.3.1 Enabling X-pack security Stop the currently running processes of Kibana and Elasticsearch In the configuration file of Elasticearch, We are going to add two settings to our Elasticsearch configuration xpack.security.enabled: true discovery.type: single-node Save the configuration file 1.3.2 Setting up passwords We are now going to open 3 Command Line Windows: One for running Elasticsearch Another one for running the password setter in Elasticsearch The third for the password settings in Kibana. This third command line will be opened in the next session. Running Elasticsearch: Open a new Command Line Navigate to the Elasticsearch folder and start Elasticsearch: bin\\elasticsearch Running the Elasticsearch password setup It might be needed to wait a little while until Elasticsearch is fully started Open a new, second, Command Line while keeping the other Command Line with Elasticsearch running open. Navigate to the Elasticsearch folder and start the password setup: bin/elasticsearch-setup-passwords auto We choose for the auto option which automatically generates a random, strong, password that will be stored in our installation. ! Important: Make sure you remember the password for both kibana_system and elastic. Save these credentials in a temporary text file like in the following screenshot. Get rid of this text file later when you have changed it to a password you can remember Confirm your selection by inserting y We are going to need these login credentials, both the username and password, for the next step during configuring the security for Kibana. As you can see, for the different roles/user names, passwords are created. Later in Kibana, we can access these user roles and changed the passwords if we would like to. 1.3.3 Changing the security configuration in Kibana To make the security settings effective for Kibana, we will add an additional setting to the Kibana configuration as well: Open the configuration file of Kibana The path to the configuration file of Kibana can be found in: Kibana-7.14.0-windows-x86-64 &gt; config &gt; kibana.yml Add the following setting elasticsearch.username: &quot;kibana_system&quot; It could be that the name is already set to “kibana_username” in the configuration. In that case, also make sure this is changed to kibana_system. You only have to uncomment the line, which is done by removing # from the particular line. Open another, a third, Command Line in which we are going to start Kibana Navigate to the Kibana directory and run the following command: bin\\kibana-keystore create Next, we add the username to the keystore bin\\kibana-keystore add elasticsearch.password We are now prompted to choose a password for our user kibana_system. You will not see this in the prompt, but this is what we have configured in the previous step. We will be prompted to insert the password. Here, we need to enter the password that is created for the kibana_system user in our previous step. Insert that password and press enter. The password is now saved in the keystore Stop Kibana if it was still running: Close the Browser tab with the Kibana interface open Stop the process in the Command Prompt that is running Kibana 1.3.4 Open Kibana with the new security settings Make sure you close all the previous Command Line windows. It might be the case that a fresh Command Line window is required for the changes having effect. Start Elasticsearch: Open the Command Line Navigate to the folder containing Elasticsearch bin\\elasticsearch Start Kibana: Open the Command Line Navigate to the folder containing Kibana bin\\kibana After Elasticsearch is started, let’s navigate to Elasticsearch: localhost:9200 We cannot access the cluster, since it is now protected: This is not a problem for now, we can leave it for now. We will be able to pick a username from the created Elasticsearch users in the settings that can be found in the Kibana interface When Kibana is also fully started, navigate to the Kibana interface in the browser: localhost:5601 Also for Kibana, we are presented with the Login page. Insert the login credentials for the elastic the password 1.3.5 Overview of the setup Have enabled the basic security for our Elastic-cluster and Kibana interface. The kibana_system user is used to “log into” our Elasticsearch cluster. Therefore we needed to configure the kibana_system credentials. When Kibana is able to connect with our Elasticsearch cluster, we are able to use Kibana as an interface to our Elasticsearch cluster. Since the kibana_system username, which is reserved, is not able to use in our Kibana interface, we use our elastic username. This is the “master” account that we can use in Kibana to navigate through our Elasticsearch cluster. This user has enough rights to make major modifications to our Elasticsearch cluster. 1.3.6 Get an overview of the users and change the password Once we have logged in with our elastic user, we can get an overview of our current users. These are the users that are automatically created in the previous step. In the sidebar menu of Kibana, select Management &gt; Stack Management In Stack Management, select: Security &gt; Users On this page we can see all the, default, users that we have created. Notice the reserved label which indicated that the values of those usernames are reserved by Elasticsearch. We can add any other username except these reserved usernames. On this page it is also possible to change permissions for specific usernames. It is also possible to change information of a certain username, for example the password. This is exactly what we are going to do for our elastic user: In the page with usernames, select the elastic user. Select Change password Follow the instructions for changing the password, which involves inserting the old, current, password. Choose a strong password you can remember. This way don’t need a separate file in which you have saved this password. This is quite sensitive information. When you have changed the password, you will be able to login with the elastic user with your new password. Now we have setup our basic security for Elasticsearch and Kibana and are able to login with our elastic user. We are going to use this user for all the operations during the labs. "],["setup-for-elasticsearch-version-8.html", "2 Setup for Elasticsearch version 8 2.1 Download Visual Studio Code 2.2 Java 2.3 Running Elasticsearch 2.4 Running Kibana 2.5 Wrap up", " 2 Setup for Elasticsearch version 8 2.1 Download Visual Studio Code Visual Studio Code can be used for almost any programming language or framework. We will mainly use it for the integrated terminal and browse trough several configuration files of Elasticsearch and Kibana. Visual Studo Code can be downloaded for free at: https://code.visualstudio.com/download Download Visual Studio Code For now, you just have to check if Visual Studio Code opens succesfully. We will later used it when we have downloaded Elasticsearch. 2.2 Java Java can be downloaded from the following link: https://www.java.com/download/ie_manual.jsp After downloading the Java installer, you can run it and follow the installation process. Download Java 2.3 Running Elasticsearch 2.3.1 Download the Elasticsearch installer After Java is installed, we can download and run Elasticsearch. Download Elasticsearch in the following link: https://www.elastic.co/downloads/elasticsearch Since we will follow this tutorial in a Windows environment, we select Windows in the “Choose platform” dropdown menu: Download Elasticsearch 2.3.2 Move and extract the file in the Home Directory Once downloaded, move it to your home directory. Your Home Directory is for example: This PC &gt; Windows (C:) &gt; Users &gt; jim . This is the folder in which you typically can find folders like My Documents, Downloads, Dropbox etc. Elasticsearch to Home Directory Extract the .zip. 2.3.3 Opening Elasticsearch in Visual Studio Code We will open the contents of the elasticsearch folder in Visual Studio Code: Open Visual Studio Code if you did not open it yet. Choose File &gt; Open Folder Visual Studio Code open folder Navigate to the elasticsearch folder: Open folder in Elasticsearch 2.3.4 Change the Java heap By default, Java will use the full available RAM of your computer as heap. This is an overkill for this tutorial and will make Elasticsearch boot very slowly. Therefore, as a first use case for changing the Elasticsearch configuration, we can change the Java heap: In the config folder, open the file jvm.options Remove the # (comments). That contain -Xms4g and Xmx4 . This will make these lines active Uncomment Java heap options 2.3.5 Running Elasticsearch from the command line Now, in the command line, we can run elasticsearch. Navigate to the right folder: cd elasticsearch-8.7.0 Run Elasticsearch: .\\bin\\elasticsearch Especially for the first time, it might take some time before Elasticsearch returns output to the command line and starts running. Elasticsearch running and showing output 2.3.6 Copy-ing important information when startin Elasticsearch for the first time After a while, we see some output about passwords and enrollment tokens. Make sure you copy this information and save it to a temporary text file. We will need this information later in the installation and configuration process. Copy important information 2.3.7 Setting the ES_HOME environment variable Now Elasticsearch is running. We want to verify if it is reachable. By default, Elasticsearch runs over port 9200. Since we enabled the security settings for Elasticsearch, traffic is encrypted over https. Therefore we should use https://localhost:9200 instead of the regular http:localhost:9200 that is available when we do not use the security features. Instead of using the browser to verify that Elasticsearch is reachable, we will use curl and specify the certificate when executing the request. First we will set the environment variable ES_HOME that we can use in our request. By setting this environment variable, we do not have to specify the full path of the Elasticsearch installation in each request. In the next step, we need the path to specify the certificate to execute the request. Open your Explorer. Navigate into the elasticsearch-8.7.0-windows-x86_64\\elasticsearch-8.7.0 folder. Copy the path of your current location like in the screenshot below: Copy path Elasticsearch home Back in VS Code, execute the following command to set the ES_HOME environment variable: set ES_HOME=C:\\Users\\yourname\\elasticsearch-8.7.0-windows-x86_64\\elasticsearch-8.7.0 Apply it for your own part. For example, change yourname to the actual name of your home directory. Check if the environment variable is succesfully set: echo %ES_HOME% If returns the path of the elasticsearch folder, the environment variable is succesfully set. Set ES_HOME environment variable 2.3.8 Check if Elasticsearch is reachable with curl and a certificate Insert the following command to check if Elasticsearch is reachable: curl --cacert %ES_HOME%\\config\\certs\\http_ca.crt -u elastic https://localhost:9200 -k The -k option specifies the certificate does not have to be varified. For a production environment it is recommended to obtain a certificate from a Certificate Authority (CA). For this tutorial we can use this option since we only want to specify that the request should use the certificate to encrypt the traffic and send it over https. Check Elasticsearch is reachable Insert the password that we have stored in the text file. We get the response of Elasticsearch and can verify it is running and reachable: Elasticsearch Reachable 2.3.9 Starting Elasticsearch as a Windows Service Elasticsearch is succesfully running in the foreground. Only when we keep the command line window open, it will keep running. Elasticsearch can also be installed as a service so it can also run in the background. Open the command line window that runs Elasticsearch. Stop the process with CTRL + C (on the keyboard). Confirm to stop the process by pressing Y (Yes). Elasticsearch is now stopped. We will make it run again, but this time as a service. Specify the command to install the Elasticsearch service. This is only needed the first time you want to use Elasticsearch as a service: .\\bin\\elasticsearch\\service.bat install Next, start the service: .\\bin\\elasticsearch\\service.bat start Install and start Elasticsearch as a service Install Elasticsearch as a service Elasticsearch is succesfully started. Let’s take al ook at it. We can open the manager pane: .\\bin\\elasticsearch\\service.bat manager Elasticsearch service manager This will show the Elasticsearch service window: Window Elasticsearch service manager 2.3.10 Open Elasticsearch in Windows Services Now Elasticsearch is installed as a service, we can stop and start Elasticsearch from the Services pane in Windows. Open Services: Open Services Windows Look for the `elasticsearch 8.7.0 service. It should be running because in the previous step we started the service. Right-click and select Stop: Stopping the Elasticsearch service Back in VS Code, when we want to verify if Elasticsearch is reachable, it will indicate Elasticsearch is not reachable. That is what we expected since we stopped the service: VS Code verify Elasticsearch is not reachable In Windows services, start Elasticsearch again: Windows services start Elasticsearch Wait a few moments for Elasticsearch to boot. There is some time between starting Elasticsearch and when Elasticsearch if fully booted. Then, execute the same command again to verify if Elasticsearch is running and reachable: Elasticsearch reachable again 2.4 Running Kibana When Elasticsearch is up and running, in our case as a service, we can take al look at Kibana. Kibana needs a running Elasticsearch instance, so we can only make Kibana work if we succesfully started Elasticsearch. 2.4.1 Download and extract the Kibana zip files We can download Kibana zip files from the following link: https://www.elastic.co/downloads/kibana Download Kibana Just like Elasticsearch, we will add the the folder in our Home Directory. This is where we extract the zip file: Extract Kibana 2.4.2 Add the Kibana folder to the Visual Studio Code Workspace We will add the Kibana to the Visual Studio Workspace so we have both the Elasticsearch and Kibana folder in one VS Code window: Add Kibana to workspace Specify Kibana folder 2.4.3 Running Kibana Open a new Terminal window in Visual Studio Code. We specify it should start in the directory of Kibana: New Terminal Specify Kibana for Terminal In the command line, we will start Kibana Start Kibana Especially for the first time, it might take a while before Kibana is started. Kibana started 2.4.4 Open Kibana in the browser Now Kibana is started, we can navigate to it in the browser: Kibana in browser When starting Elasticsearch, we obtained an enrollment token for Kibana. This is the moment we need to use this token to “enroll” Kibana to our running Elasticsearch instance. Specify enrollment token Since the token is only available for 30 minutes after generation, it might be expired. Enrollmment token not working 2.4.5 Create a new enrollment token for Kibana We will create a new enrollment token for Kibana. In a new Terminal window in Elasticsearch, runn the following command. .\\bin\\elasticsearch-create-enrollment-token -s kibana --url &quot;https://localhost:9200&quot; Note that Elasticsearch is still running even we do not see it in the Terminal anymore. Elasticsearch runs in the back as a service. New enrollment token for Kibana Copy the new enrollment token en go back to the browser. Paste the new enrollment token: New enrollment token Kibana will now start properly. Kibana starting properly Log in with the elastic user and use the password we have in our text file: Copy password Log in with elastic user You are now succesfully, and securely, logged into Kibana! 2.4.6 Change password of elastic user in Kibana We will change the password of the elastic user for something we will remember more properly. In Kibana open the hamburger menu and scroll down. Select Stack Management Kibana specify Stack Management In the menu select Users below the Security header: Select users Next, select the elastic user: Select elastic user Change the password: Change passs User Now, let’s check if it works. We will log out from Kibana. Log out Kibana Log in with the new password: Log in with new password We succesfully logged in with our new password! 2.4.7 Experiment with Kibana Dashboards At the home page of Kibana, we can select Try sample data to see some Kibana dashboards in action. Try sample data Choose the “Sample web logs” Dashboard: Sample web logs Dashboard Take a look at the Dashboard: Dashboard opened 2.4.8 Experiment with Elasticsearch commands in Kibana (Dev Tools) Next, we can experiment with some Elasticsearch commands, we will soon learn more about these commands. These commands are referred as Query DSL which is the Domain Specific Language of Elasticsearch. It is a large collection of JSON bodies of API requests that can be used for Elasticsearch. Open the hamburger menu and select Dev Tools: Dev Tools In the following command we will show all available Elasticsearch indices available in our currently running Elasticsearch instance: GET _cat/indices?v Show indices To see the contents of a specific Elasticsearch index, we can use the following DSL query: GET kibana_sample_data_logs/_search Show document in index 2.5 Wrap up We have now succesfully downloaded, configured and installed Elasticsearch as a service. Kibana can be used as a visual interface to visualize our data our manage our Elasticsearch instance. "],["crud-operations-in-elasticsearch.html", "3 CRUD operations in Elasticsearch", " 3 CRUD operations in Elasticsearch In the Kibana interface Navigate to Dev Tools: List the current indices GET _cat/indices?v 3.0.1 Adding a new document Put a new document in a non-existing index. Insert a document similar as in the example in the left pane of the following screenshot Behind the PUT-command, we can add a document we like. Experiment with the editor to get familiar with the Elasticsearch API. Get the document: Try to see what happens when you try do get the document of id 2. This document does not exist yet. GET /articles/_doc/2 3.0.2 Updating an existing document We can also update an existing document: Put a new document on the same id Add a slightly change to the document Find out what the output looks like: 3.0.3 Deleting a document We can also delete a document in Elasticsearch by specifing the id of the document we would like to delte: The document is now deleted Try to get to retrieve the document again, even now we have deleted it: GET /articles/_doc/1 We have no documents anymore, so will the index articles still exist? Let’s find out? Notice that the index still exists and even has a document count of 1 (not zero). You might be in a situation in which you want to delete an index. You can do this simply by: DELETE articles articles is in this case the name of the index ! Important: Be very careful in deleting indices. There is no way to retrieve the data of the index back once you have deleted it. There are possibilities to enable backups, but backups are not enabled in Elasticsearch by default. In production, it is quite uncommon to manually add documents this way. However, this is the very basic way of executing CRUD operations. "],["searching-for-data.html", "4 Searching for data 4.1 Loading the Dynamic Dataset 4.2 Loading the Static Dataset 4.3 Search in Elasticsearch", " 4 Searching for data In the labs, we are going to use two different types of sample data sets: Dynamic datasets Static datasets 4.1 Loading the Dynamic Dataset The Dynamic Dataset can be loaded in the Home page of Kibana - In the Home page of Kibana, click for the little Try our sample data line Select the Sample web logs dataset. Click Add data It will take a few moments, when the data is successfully loaded, the button changes in View data You are finished for now, the next step is to add the static data 4.2 Loading the Static Dataset For the static data, we are going to experiment with the Upload file option. This way we can use file from our computer to index in Elasticsearch. We are going to upload Shakespeare documents as examples for our static data: Download the Shakespeare dataset https://download.elastic.co/demos/kibana/gettingstarted/shakespeare_6.0.json . In the Add data page, choose the Upload data tab Click the Select drag and drop a file button, or drag the file into this area Kibana will process the file and provide a summary of the dataset that will be uploaded. In this phase you can modify several settings for the index that will be created. For now, we will only change the name of the index that will be created for the contents of this file. Change the name to shakespeare. Now the name is changed, click Import By importing the file, Kibana will go through several phases of the import process. When these phases are completed, the data is successfully uploaded in our Elasticsearch cluster. Next, we will get back to Dev Tools to see if our two new indices are visible: Just like in the previous screenshot, your indices with sample data shoud be available now. 4.3 Search in Elasticsearch 4.3.1 Search in Static Datasets Search is mainly executed on static datasets. In this case, we will use the shakespeare dataset that we have imported in our Elasticsearch cluster in the previous step: We will start with a simple match-query in our shakespeare index: We can get information about the index by checking out the mapping. This way we will get an idea of the fields we can use for our search queries Notice that in Dev Tools you have auto-completion to help you construct your request: The auto-completion in Dev Tools helps you suggest the right options at the right place in the query: To get an idea, we can get the mapping of an index in our Elasticsearch cluster: Another way to get an idea about a document in our index, requesting some random documents: Let’s try out some different search queries: Match any document with the play name “Henry V” Get all documents with speech_number lower than or equal to 10: Get all documents in the shakespeare index with speech number between 10 and 20 (including 10 and 20) Get all documents from the shakespeare index from the play name Hamlet between line number 1 and 2 (greater and equal to and lower and equal to) "],["elasticsearch-queries.html", "5 Elasticsearch queries 5.1 Relevance 5.2 Full text queries 5.3 Combining queries", " 5 Elasticsearch queries 5.1 Relevance Let’s experiment with a few search queries to experiment with the relevance: Search for documents that have king or queen in the text_entry field: Search for documents that have king and queen in the text_entry field Search for documents that have eat least 2 of the following terms in the text_entry field: king, queen, kill: 5.2 Full text queries Let’s experiment with some Full Text queries: Search for documents that include the phrase “king and queen”: Search for documents that include the phrase “king and queen” but that are allowed to have a maximum of two other terms between this phrase: In the documents search for the term “Antony” in the play_name, speaker and text_entry fields: Execute the same search, but increase score of hits found in the text_entry by multiplying it with 4: Create a search query for the term “king” in which a spelling error of 1 letter is allowed: 5.3 Combining queries Let’s experiment with some combination of queries: Execute a search for documents that must include the term king and and are ranked higher if they either contain the terms queen, fight, or hail. Execute the same search but make sure the search results eigher must contain at least of the terms queen, fight or hail. Create a search query for documents that contain the term king but do not contain the term queen. "],["aggregations.html", "6 Aggregations 6.1 Metrics 6.2 Buckets 6.3 Combined Aggregations 6.4 Pagination and Pipeline Aggregations", " 6 Aggregations 6.1 Metrics For this lab we will use the other index kibana_sample_data_logs, which is in this course referred to as the “dynamic” dataset. This index consists of dynamic data, which are in this case logs of website: To get an idea of what a document in this looks like, we can execute a match_all search: Find out the total number of bytes, which is a field in the index, for all the log-documents combined in this index: Find out the total number of bytes that only come from Windows 8 requests Find out the average number of bytes. Get both the aggregation and some examples of logs: Get the percentiles of the bytes field: How many different operating systems do we have in our logs? 6.2 Buckets Aggregations: Aggregate the number of total bytes per month. You can use the timestamp field, which is the default for aggregating with datetime-related keys Aggregate the total number of bytes by creating buckets of 2000 Again, aggregate the total number of bytes by creating ranges of: 0 – 3000 – 8000 8000 – 12000 12000 or higher Aggregate the number of bytes per operating system: Aggregate the number of bytes per day and sort it on the largest number of bytes served on a day. Execute the same aggregation, but now, sort it on the`date instead of the count 6.3 Combined Aggregations Combined aggregations: Create an aggregation for counting the number of bytes per day. Order the results from the largest number of bytes in a day, descending order In the same aggregation, divide the results in percentiles of 20, 50 and 75 Create an aggregation that counts the number of log files per month. In each bucket, divide the results over the different operating systems. 6.4 Pagination and Pipeline Aggregations Pagination and Pipeline Aggregations Create a composite aggregation in which we have an interval of 1 hour Create a Pipeline Aggregation which gives us the total number of bytes per month also the max month Create a Pipeline Aggregation in which we show the total number of bytes per month including the cumulative sum for each bucket "],["nodes-and-shards.html", "7 Nodes and Shards 7.1 Running a multi-node cluster 7.2 Adding a second Elasticsearch node locally 7.3 Configure the Elasticsearch nodes for the multi-node cluster 7.4 Configure the cluster value and set the names of the nodes 7.5 Specify the network settings and indicate which node is the master 7.6 Change the security settings 7.7 Start the multi-node cluster 7.8 Check out our cluster in Kibana 7.9 Cluster roles", " 7 Nodes and Shards 7.1 Running a multi-node cluster In this example we will run multiple elasticsearch instances on your local computer. In terms of limited resources, in the examples we will stick with 2 instances. We will achieve this by “creating” another Elasticsearch instance. For this lab, close both Elasticsearch and Kibana if these are still running in the Command Line 7.2 Adding a second Elasticsearch node locally Execute the following steps in your explorer: Open an Explorer (Windows) or Finder (Mac) tab on your machine. Create a new directory called es_nodes. This directory could have any name, but this is quite descriptive for now Drag the .zip file with the fresh Elasticsearch instance in the es_nodes directory. Rename the .zip file to elasticsearch_2. Also this is descriptive enough for now. Extract the zip file Your should now have the following setup: A directory called es_nodes in your Home Directory In the es_nodes directory an instance of Elasticsearch extracted. Optionally you still have the .zip file. You can either leave it or delete it since we do not need it anymore from now on. 7.3 Configure the Elasticsearch nodes for the multi-node cluster Now that we have a “second Elasticsearch” instance, we need to make sure the configuration for both instances is ready to form a 2-node Elasticsearch cluster. Since we now have 2 nodes, we have two locations in which we can set the configuration. The changes we are going to make in our configurations involve: Make sure both nodes are assigned to the same cluster Set or change the names of each node Indicate if the node is a master not or not Specify the network host Specify which other networks to discover In both nodes, indicate which node is the master Change the security settings It might be needed to change the memory settings for the multiple Elasticsearch instances. For both instances, we can change the settings in the config/jvm.options file. For example, we can lower the memory from 4 GB to 2 GB ram by uncommenting and changing the values in the settings. 7.4 Configure the cluster value and set the names of the nodes On the first node, which is the first and initial Elasticsearch instance we configured, make sure you have the following settings: elasticsearch.yml (first node): cluster.name: es-training-cluster node.name: node-1 node.master: true elasticsearch.yml (second node): cluster.name: es-training-cluster node.name: node-2 node.master: false By editing these configurations, we indicated in both nodes to which cluster they belong to, what the name of the node is and if the node is a master-node or not. 7.5 Specify the network settings and indicate which node is the master Next, we need to configure settings about the network to discover. On that network the node will search for a cluster (Elasticsearch instances with only a single node are also considered a cluster). Since we have both these instances running locally, we can specify the value of the network of the machine. The settings must have the same values on both nodes. Therefore, in the configuration files of both the first and second node set or change the following configuration options: elasticsearch.yml (both nodes): network.host: 0.0.0.0 discover.seed_hosts: [“127.0.0.1”] cluster.initial_master_nodes: [“node-1”] 7.6 Change the security settings Since HTTP is used in Node-to-Node communication, it is strongly recommed that in production both security and encryption is enabled. For now, since we focus on having our first multi-node cluster up and running and are not running in production, we leave these security steps for now. In both nodes, for now, disable the security settings by adding a command (#) symbol in front of the configuration setting or delete the entire line. We can add it again when we want to proceed with our single node or when we have the additional settings enabled. Make sure you have saved the configurations all the nodes. 7.7 Start the multi-node cluster Now we have changed the configuration for both our nodes, we will start our cluster. If you haven’t done it yet, close both all the Elasticsearch and Kibana instances: Start the first, master, Elasticsearch node In the Command Line navigate to the Command Line and execute bin\\elasticsearch During the startup, it will indicate that it is the master node of the cluster When the first node is started, we can launch the second node: Start the second,Elasticsearch node In the Command Line navigate to the Command Line to the second Elasticsearch instance which we have called es_nodes. execute bin\\elasticsearch We currently have two Command Line windows open. After the startup of the second node is complete, it tries to look for other running instances on the same network. When the second node has found the already running instance, it will join the cluster as the specified role. Try to locate the following log line in the second Elasticsearch instance: This log message indicates it hast joined the es-training-cluster cluster and recognizes that the first node, Node-1, is the master of this cluster. If we open the Command Line in which the first instance is running, we will notice a log line that indicates another node has joined the cluster. We have now successfully launched a two-node Elasticsearch cluster locally on our machine. We can check for both nodes if they are running by navigating both to: localhost:9200 localhost:9201 7.8 Check out our cluster in Kibana We can open Kibana the same way as was the case when we still had a single node cluster: Open a new Command Line in which we launch Kibana When Kibana is fully started, navigate to the Kibana interface at localhost:5601 Let’s checkout out the settings of our cluster: In Kibana, navigate to the Dev Tools pane We can get an overview of the cluster settings by inserting a query: GET _cluster/health 7.9 Cluster roles Change the settings of the cluster which makes only Node 2 the ingestion node: "],["troubleshooting-and-monitoring.html", "8 Troubleshooting and Monitoring 8.1 Responses and Allocation 8.2 Enabling monitoring 8.3 Stack Monitoring 8.4 Diagnosing Performance Issues", " 8 Troubleshooting and Monitoring 8.1 Responses and Allocation 8.1.1 Checking the health/status Check the health status of the cluster: Check the health status at an index level: Check the health status of the kibana_sample_data_logs index Get an overview of the health status on a shards-level Check the shards allocation 8.2 Enabling monitoring Monitoring pane: Monitoring pane indicates no monitoring setup yet Download Metricbeat https://www.elastic.co/downloads/beats/metricbeat Extract Metricbeat in the Home Directory We first change the configuration of Metricbeat Open Powershell tab: In Powershell, we will install Metricbeat Install the x-pack module Start Metricbeat Once Metricbeat starts working for the current instance, we will get the message in Kibana: 8.3 Stack Monitoring Metricbeat open Stack Monitoring Metricbeat node 1 Metricbeat multiple indices 8.4 Diagnosing Performance Issues First we will change the index by adding an extra replica Find out the thread pool: Check out the status for the thread pools: Pretty print thread pool: Get current tasks: Get the specific nodes: "]]
