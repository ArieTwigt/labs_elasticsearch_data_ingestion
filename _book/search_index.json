<<<<<<< HEAD
[["setup-for-elasticsearch-version-7.html", "Elasticsearch Fundamentals 1 Setup for Elasticsearch version 7 1.1 Download Elasticsearch 1.2 Getting started with Kibana 1.3 Setting up basic security for Elasticsearch and Kibana", " Elasticsearch Fundamentals Arie Twigt 1 Setup for Elasticsearch version 7 1.1 Download Elasticsearch 1.1.1 Download and unzip the Elasticsearch installation in your Home Directory Download Elasticsearch by visiting the following url: https://www.elastic.co/downloads/elasticsearch Choose for Windows rather than for the MSI. We are going to place and extract the file in our Home Directory: &gt; Your Home Directory is for example: This PC &gt; Windows (C:) &gt; Users &gt; arie . This is the folder in which you typically can find folders like My Documents, Downloads, Dropbox etc. Unzip the folder and extract it in the same directory. This is most likely the default option for unzipping the file: 1.1.2 Start Elasticsearch from the Command Line Now we have downloaded and extracte Elasticsearch, we can launch it from the command line: Open a new command line. This can be for example Command Prompt or Powershell In the command line, navigate to your Home Directory where your Elasticsearch instance is stored If the Elasticsearch directory is present, navigate into it. In the following example, we have downloaded Elasticsearch 7.14.0, so the commands would be: Navigate into the Elasticsearch directory cd elasticsearch-7.14.0 Start Elasticsearch bin\\elasticsearch The bin\\elasticsearch, if in the right folder, will launch the Elasticsearch instance We need to wait a minute or so before Elasticsearch is fully booted. To find out if Elasticsearch is succesfully booted, we can open a browser and navigate to localhost:9200. Checkout the output and the name of your cluster. By default this will similar to the name of your computer. 1.1.3 Changing basic settings in the Elasticsearch configuration Later in this course, we will change the configuration of the Elasticsearch instance. In this section, we will start with modifiying some basic settings in te configuration. We will start by chaning the name of the cluster. An Elasticsearch “cluster” is a collection of hardware that is operates as one Elasticsearch instance. Elasticsearch instances that consist of only one Node (machine) are also referred to as a “cluster”. Later in this course we will run a cluster that runs on multiple nodes. Change the default name of the Elasticsearch cluster: In the Command Line, close the running Elasticsearch instance Run Elasticsearch with a different node name and cluster name: bin\\elasticsearch -E node.name=my_node -E cluster.name=my_cluster Wait until Elasticsearch is fully started Check the output of the browser There is another, more sustainable, way of specifying the configuration of an Elasticsearch instance: Open your Explorer and navigate to the config directory which can be found in the Elasticsearch directory In this screenshot, for Elasticsearch version 7.14.0 this is Elasticsearch-7.14.0 &gt; config &gt; elasticsearch.yml You can open the elasticsearch.yml file with Notepad. Uncomment, which is removing the #, in the line in which the cluster.name property is defined. Change the default name to descriptive name you desire. In The case of this example, we have named it es-training-cluster. Save the elasticsearch.yml file If you did not have already done this, stop the running Elasticsearch instance in the command line. Start Elasticsearch again just with the regular command bin\\elasticsearch Keep in mind that in a real-world environment, the running Elasticsearch instance can be set as a service. It keeps on running this way. In this training we will simulate this by keeping, sometime multiple, instances of the Command Line open. 1.2 Getting started with Kibana 1.2.1 Interacting with Elasticsearch There are several ways to interact with our running Elasticsearch instance: Using curl operations from the Command Line Sending HTTP requests using the Elasticsearch API in a tool like Postman Using the Dev Tools in Kibana 1.2.2 Managing Elasticsearch in Kibana In this course we choose for the last option since we will be able to execute other actions in Kibana as well. Therefore, we first need to download Kibana https://www.elastic.co/downloads/kibana 1.2.3 Downloading and extracting Kibana Downloading and setting up Kibana is similar to the steps we executed for Elasticsearch: Choose for your operating system, which is in the case of our examples Windows. Just as with Elasticsearch, make sure to move the download from your Downloads folder to your Home Directory. Also, just like Elasticsearch, extract the contents of the zip-file 1.2.4 Launching Kibana Open a new Command Line and navigate to the Kibana directory. cd kibana-7.14-windows-x86_64 For convenience you can change the name of the directory by removing the windowspart Start Kibana bin\\kibana After a minute or so, Kibana is started. You can use Kibana by navigating to localhost:5601 in your browser. 1.2.5 Using Dev Tools for CRUD-operations in Kibana Now we have started Kibana, we can use the Dev Tools to execute CRUD-actions to Elasticsearch: In the Left Pane scroll down to find the Dev Tools tab In the Dev Tools tab we can execute several operations in Kibana, also CRUD-operations. First we will use a command that lists all the current indices in Elasticsearch: GET _cat/indices?v Press the play button to execute the command We will get a list of indices in Elasticsearch. These indices are available by default. These are default indices that have mostly to do with logging and administration. We also notice a message about setting up security. This will be our next step. Kibana is working now, however, it is not secure yet. When you are following these labs on your local machine, this is not quite a big deal. However, when you are planning to configure Elasticsearch on a server that is reachable for other users, you do want to have at least the basic security setup. Otherwise, just anybody can log into your Elasticsearch cluster and Kibana and even modify settings or documents. In the next step, we are going to setup basic security for Elasticsearch and Kibana. 1.3 Setting up basic security for Elasticsearch and Kibana Setting up the basic security settings for Elasticsearch and Kibana is a combination of command line operations and settings in the configuration files of both Elasticsearch in Kibana: 1.3.1 Enabling X-pack security Stop the currently running processes of Kibana and Elasticsearch In the configuration file of Elasticearch, We are going to add two settings to our Elasticsearch configuration xpack.security.enabled: true discovery.type: single-node Save the configuration file 1.3.2 Setting up passwords We are now going to open 3 Command Line Windows: One for running Elasticsearch Another one for running the password setter in Elasticsearch The third for the password settings in Kibana. This third command line will be opened in the next session. Running Elasticsearch: Open a new Command Line Navigate to the Elasticsearch folder and start Elasticsearch: bin\\elasticsearch Running the Elasticsearch password setup It might be needed to wait a little while until Elasticsearch is fully started Open a new, second, Command Line while keeping the other Command Line with Elasticsearch running open. Navigate to the Elasticsearch folder and start the password setup: bin/elasticsearch-setup-passwords auto We choose for the auto option which automatically generates a random, strong, password that will be stored in our installation. ! Important: Make sure you remember the password for both kibana_system and elastic. Save these credentials in a temporary text file like in the following screenshot. Get rid of this text file later when you have changed it to a password you can remember Confirm your selection by inserting y We are going to need these login credentials, both the username and password, for the next step during configuring the security for Kibana. As you can see, for the different roles/user names, passwords are created. Later in Kibana, we can access these user roles and changed the passwords if we would like to. 1.3.3 Changing the security configuration in Kibana To make the security settings effective for Kibana, we will add an additional setting to the Kibana configuration as well: Open the configuration file of Kibana The path to the configuration file of Kibana can be found in: Kibana-7.14.0-windows-x86-64 &gt; config &gt; kibana.yml Add the following setting elasticsearch.username: &quot;kibana_system&quot; It could be that the name is already set to “kibana_username” in the configuration. In that case, also make sure this is changed to kibana_system. You only have to uncomment the line, which is done by removing # from the particular line. Open another, a third, Command Line in which we are going to start Kibana Navigate to the Kibana directory and run the following command: bin\\kibana-keystore create Next, we add the username to the keystore bin\\kibana-keystore add elasticsearch.password We are now prompted to choose a password for our user kibana_system. You will not see this in the prompt, but this is what we have configured in the previous step. We will be prompted to insert the password. Here, we need to enter the password that is created for the kibana_system user in our previous step. Insert that password and press enter. The password is now saved in the keystore Stop Kibana if it was still running: Close the Browser tab with the Kibana interface open Stop the process in the Command Prompt that is running Kibana 1.3.4 Open Kibana with the new security settings Make sure you close all the previous Command Line windows. It might be the case that a fresh Command Line window is required for the changes having effect. Start Elasticsearch: Open the Command Line Navigate to the folder containing Elasticsearch bin\\elasticsearch Start Kibana: Open the Command Line Navigate to the folder containing Kibana bin\\kibana After Elasticsearch is started, let’s navigate to Elasticsearch: localhost:9200 We cannot access the cluster, since it is now protected: This is not a problem for now, we can leave it for now. We will be able to pick a username from the created Elasticsearch users in the settings that can be found in the Kibana interface When Kibana is also fully started, navigate to the Kibana interface in the browser: localhost:5601 Also for Kibana, we are presented with the Login page. Insert the login credentials for the elastic the password 1.3.5 Overview of the setup Have enabled the basic security for our Elastic-cluster and Kibana interface. The kibana_system user is used to “log into” our Elasticsearch cluster. Therefore we needed to configure the kibana_system credentials. When Kibana is able to connect with our Elasticsearch cluster, we are able to use Kibana as an interface to our Elasticsearch cluster. Since the kibana_system username, which is reserved, is not able to use in our Kibana interface, we use our elastic username. This is the “master” account that we can use in Kibana to navigate through our Elasticsearch cluster. This user has enough rights to make major modifications to our Elasticsearch cluster. 1.3.6 Get an overview of the users and change the password Once we have logged in with our elastic user, we can get an overview of our current users. These are the users that are automatically created in the previous step. In the sidebar menu of Kibana, select Management &gt; Stack Management In Stack Management, select: Security &gt; Users On this page we can see all the, default, users that we have created. Notice the reserved label which indicated that the values of those usernames are reserved by Elasticsearch. We can add any other username except these reserved usernames. On this page it is also possible to change permissions for specific usernames. It is also possible to change information of a certain username, for example the password. This is exactly what we are going to do for our elastic user: In the page with usernames, select the elastic user. Select Change password Follow the instructions for changing the password, which involves inserting the old, current, password. Choose a strong password you can remember. This way don’t need a separate file in which you have saved this password. This is quite sensitive information. When you have changed the password, you will be able to login with the elastic user with your new password. Now we have setup our basic security for Elasticsearch and Kibana and are able to login with our elastic user. We are going to use this user for all the operations during the labs. "],["setup-for-elasticsearch-version-8.html", "2 Setup for Elasticsearch version 8 2.1 Download Visual Studio Code 2.2 Java 2.3 Running Elasticsearch 2.4 Running Kibana 2.5 Wrap up", " 2 Setup for Elasticsearch version 8 2.1 Download Visual Studio Code Visual Studio Code can be used for almost any programming language or framework. We will mainly use it for the integrated terminal and browse trough several configuration files of Elasticsearch and Kibana. Visual Studo Code can be downloaded for free at: https://code.visualstudio.com/download Download Visual Studio Code For now, you just have to check if Visual Studio Code opens succesfully. We will later used it when we have downloaded Elasticsearch. 2.2 Java Java can be downloaded from the following link: https://www.java.com/download/ie_manual.jsp After downloading the Java installer, you can run it and follow the installation process. Download Java 2.3 Running Elasticsearch 2.3.1 Download the Elasticsearch installer After Java is installed, we can download and run Elasticsearch. Download Elasticsearch in the following link: https://www.elastic.co/downloads/elasticsearch Since we will follow this tutorial in a Windows environment, we select Windows in the “Choose platform” dropdown menu: Download Elasticsearch 2.3.2 Move and extract the file in the Home Directory Once downloaded, move it to your home directory. Your Home Directory is for example: This PC &gt; Windows (C:) &gt; Users &gt; jim . This is the folder in which you typically can find folders like My Documents, Downloads, Dropbox etc. Elasticsearch to Home Directory Extract the .zip. 2.3.3 Opening Elasticsearch in Visual Studio Code We will open the contents of the elasticsearch folder in Visual Studio Code: Open Visual Studio Code if you did not open it yet. Choose File &gt; Open Folder Visual Studio Code open folder Navigate to the elasticsearch folder: Open folder in Elasticsearch 2.3.4 Change the Java heap By default, Java will use the full available RAM of your computer as heap. This is an overkill for this tutorial and will make Elasticsearch boot very slowly. Therefore, as a first use case for changing the Elasticsearch configuration, we can change the Java heap: In the config folder, open the file jvm.options Remove the # (comments). That contain -Xms4g and Xmx4 . This will make these lines active Uncomment Java heap options 2.3.5 Running Elasticsearch from the command line Now, in the command line, we can run elasticsearch. Navigate to the right folder: cd elasticsearch-8.7.0 Run Elasticsearch: .\\bin\\elasticsearch Especially for the first time, it might take some time before Elasticsearch returns output to the command line and starts running. Elasticsearch running and showing output 2.3.6 Copy-ing important information when startin Elasticsearch for the first time After a while, we see some output about passwords and enrollment tokens. Make sure you copy this information and save it to a temporary text file. We will need this information later in the installation and configuration process. Copy important information 2.3.7 Setting the ES_HOME environment variable Now Elasticsearch is running. We want to verify if it is reachable. By default, Elasticsearch runs over port 9200. Since we enabled the security settings for Elasticsearch, traffic is encrypted over https. Therefore we should use https://localhost:9200 instead of the regular http:localhost:9200 that is available when we do not use the security features. Instead of using the browser to verify that Elasticsearch is reachable, we will use curl and specify the certificate when executing the request. First we will set the environment variable ES_HOME that we can use in our request. By setting this environment variable, we do not have to specify the full path of the Elasticsearch installation in each request. In the next step, we need the path to specify the certificate to execute the request. Open your Explorer. Navigate into the elasticsearch-8.7.0-windows-x86_64\\elasticsearch-8.7.0 folder. Copy the path of your current location like in the screenshot below: Copy path Elasticsearch home Back in VS Code, execute the following command to set the ES_HOME environment variable: set ES_HOME=C:\\Users\\yourname\\elasticsearch-8.7.0-windows-x86_64\\elasticsearch-8.7.0 Apply it for your own part. For example, change yourname to the actual name of your home directory. Check if the environment variable is succesfully set: echo %ES_HOME% If returns the path of the elasticsearch folder, the environment variable is succesfully set. Set ES_HOME environment variable 2.3.8 Check if Elasticsearch is reachable with curl and a certificate Insert the following command to check if Elasticsearch is reachable: curl --cacert %ES_HOME%\\config\\certs\\http_ca.crt -u elastic https://localhost:9200 -k The -k option specifies the certificate does not have to be varified. For a production environment it is recommended to obtain a certificate from a Certificate Authority (CA). For this tutorial we can use this option since we only want to specify that the request should use the certificate to encrypt the traffic and send it over https. Check Elasticsearch is reachable Insert the password that we have stored in the text file. We get the response of Elasticsearch and can verify it is running and reachable: Elasticsearch Reachable 2.3.9 Starting Elasticsearch as a Windows Service Elasticsearch is succesfully running in the foreground. Only when we keep the command line window open, it will keep running. Elasticsearch can also be installed as a service so it can also run in the background. Open the command line window that runs Elasticsearch. Stop the process with CTRL + C (on the keyboard). Confirm to stop the process by pressing Y (Yes). Elasticsearch is now stopped. We will make it run again, but this time as a service. Specify the command to install the Elasticsearch service. This is only needed the first time you want to use Elasticsearch as a service: .\\bin\\elasticsearch\\service.bat install Next, start the service: .\\bin\\elasticsearch\\service.bat start Install and start Elasticsearch as a service Install Elasticsearch as a service Elasticsearch is succesfully started. Let’s take al ook at it. We can open the manager pane: .\\bin\\elasticsearch\\service.bat manager Elasticsearch service manager This will show the Elasticsearch service window: Window Elasticsearch service manager 2.3.10 Open Elasticsearch in Windows Services Now Elasticsearch is installed as a service, we can stop and start Elasticsearch from the Services pane in Windows. Open Services: Open Services Windows Look for the `elasticsearch 8.7.0 service. It should be running because in the previous step we started the service. Right-click and select Stop: Stopping the Elasticsearch service Back in VS Code, when we want to verify if Elasticsearch is reachable, it will indicate Elasticsearch is not reachable. That is what we expected since we stopped the service: VS Code verify Elasticsearch is not reachable In Windows services, start Elasticsearch again: Windows services start Elasticsearch Wait a few moments for Elasticsearch to boot. There is some time between starting Elasticsearch and when Elasticsearch if fully booted. Then, execute the same command again to verify if Elasticsearch is running and reachable: Elasticsearch reachable again 2.4 Running Kibana When Elasticsearch is up and running, in our case as a service, we can take al look at Kibana. Kibana needs a running Elasticsearch instance, so we can only make Kibana work if we succesfully started Elasticsearch. 2.4.1 Download and extract the Kibana zip files We can download Kibana zip files from the following link: https://www.elastic.co/downloads/kibana Download Kibana Just like Elasticsearch, we will add the the folder in our Home Directory. This is where we extract the zip file: Extract Kibana 2.4.2 Add the Kibana folder to the Visual Studio Code Workspace We will add the Kibana to the Visual Studio Workspace so we have both the Elasticsearch and Kibana folder in one VS Code window: Add Kibana to workspace Specify Kibana folder 2.4.3 Running Kibana Open a new Terminal window in Visual Studio Code. We specify it should start in the directory of Kibana: New Terminal Specify Kibana for Terminal In the command line, we will start Kibana Start Kibana Especially for the first time, it might take a while before Kibana is started. Kibana started 2.4.4 Open Kibana in the browser Now Kibana is started, we can navigate to it in the browser: Kibana in browser When starting Elasticsearch, we obtained an enrollment token for Kibana. This is the moment we need to use this token to “enroll” Kibana to our running Elasticsearch instance. Specify enrollment token Since the token is only available for 30 minutes after generation, it might be expired. Enrollmment token not working 2.4.5 Create a new enrollment token for Kibana We will create a new enrollment token for Kibana. In a new Terminal window in Elasticsearch, runn the following command. .\\bin\\elasticsearch-create-enrollment-token -s kibana --url &quot;https://localhost:9200&quot; Note that Elasticsearch is still running even we do not see it in the Terminal anymore. Elasticsearch runs in the back as a service. New enrollment token for Kibana Copy the new enrollment token en go back to the browser. Paste the new enrollment token: New enrollment token Kibana will now start properly. Kibana starting properly Log in with the elastic user and use the password we have in our text file: Copy password Log in with elastic user You are now succesfully, and securely, logged into Kibana! 2.4.6 Change password of elastic user in Kibana We will change the password of the elastic user for something we will remember more properly. In Kibana open the hamburger menu and scroll down. Select Stack Management Kibana specify Stack Management In the menu select Users below the Security header: Select users Next, select the elastic user: Select elastic user Change the password: Change passs User Now, let’s check if it works. We will log out from Kibana. Log out Kibana Log in with the new password: Log in with new password We succesfully logged in with our new password! 2.4.7 Experiment with Kibana Dashboards At the home page of Kibana, we can select Try sample data to see some Kibana dashboards in action. Try sample data Choose the “Sample web logs” Dashboard: Sample web logs Dashboard Take a look at the Dashboard: Dashboard opened 2.4.8 Experiment with Elasticsearch commands in Kibana (Dev Tools) Next, we can experiment with some Elasticsearch commands, we will soon learn more about these commands. These commands are referred as Query DSL which is the Domain Specific Language of Elasticsearch. It is a large collection of JSON bodies of API requests that can be used for Elasticsearch. Open the hamburger menu and select Dev Tools: Dev Tools In the following command we will show all available Elasticsearch indices available in our currently running Elasticsearch instance: GET _cat/indices?v Show indices To see the contents of a specific Elasticsearch index, we can use the following DSL query: GET kibana_sample_data_logs/_search Show document in index 2.5 Wrap up We have now succesfully downloaded, configured and installed Elasticsearch as a service. Kibana can be used as a visual interface to visualize our data our manage our Elasticsearch instance. "],["crud-operations-in-elasticsearch.html", "3 CRUD operations in Elasticsearch", " 3 CRUD operations in Elasticsearch In the Kibana interface Navigate to Dev Tools: List the current indices GET _cat/indices?v 3.0.1 Adding a new document Put a new document in a non-existing index. Insert a document similar as in the example in the left pane of the following screenshot Behind the PUT-command, we can add a document we like. Experiment with the editor to get familiar with the Elasticsearch API. Get the document: Try to see what happens when you try do get the document of id 2. This document does not exist yet. GET /articles/_doc/2 3.0.2 Updating an existing document We can also update an existing document: Put a new document on the same id Add a slightly change to the document Find out what the output looks like: 3.0.3 Deleting a document We can also delete a document in Elasticsearch by specifing the id of the document we would like to delte: The document is now deleted Try to get to retrieve the document again, even now we have deleted it: GET /articles/_doc/1 We have no documents anymore, so will the index articles still exist? Let’s find out? Notice that the index still exists and even has a document count of 1 (not zero). You might be in a situation in which you want to delete an index. You can do this simply by: DELETE articles articles is in this case the name of the index ! Important: Be very careful in deleting indices. There is no way to retrieve the data of the index back once you have deleted it. There are possibilities to enable backups, but backups are not enabled in Elasticsearch by default. In production, it is quite uncommon to manually add documents this way. However, this is the very basic way of executing CRUD operations. "],["searching-for-data.html", "4 Searching for data 4.1 Loading the Dynamic Dataset 4.2 Loading the Static Dataset 4.3 Search in Elasticsearch", " 4 Searching for data In the labs, we are going to use two different types of sample data sets: Dynamic datasets Static datasets 4.1 Loading the Dynamic Dataset The Dynamic Dataset can be loaded in the Home page of Kibana - In the Home page of Kibana, click for the little Try our sample data line Select the Sample web logs dataset. Click Add data It will take a few moments, when the data is successfully loaded, the button changes in View data You are finished for now, the next step is to add the static data 4.2 Loading the Static Dataset For the static data, we are going to experiment with the Upload file option. This way we can use file from our computer to index in Elasticsearch. We are going to upload Shakespeare documents as examples for our static data: Download the Shakespeare dataset https://download.elastic.co/demos/kibana/gettingstarted/shakespeare_6.0.json . In the Add data page, choose the Upload data tab Click the Select drag and drop a file button, or drag the file into this area Kibana will process the file and provide a summary of the dataset that will be uploaded. In this phase you can modify several settings for the index that will be created. For now, we will only change the name of the index that will be created for the contents of this file. Change the name to shakespeare. Now the name is changed, click Import By importing the file, Kibana will go through several phases of the import process. When these phases are completed, the data is successfully uploaded in our Elasticsearch cluster. Next, we will get back to Dev Tools to see if our two new indices are visible: Just like in the previous screenshot, your indices with sample data shoud be available now. 4.3 Search in Elasticsearch 4.3.1 Search in Static Datasets Search is mainly executed on static datasets. In this case, we will use the shakespeare dataset that we have imported in our Elasticsearch cluster in the previous step: We will start with a simple match-query in our shakespeare index: We can get information about the index by checking out the mapping. This way we will get an idea of the fields we can use for our search queries Notice that in Dev Tools you have auto-completion to help you construct your request: The auto-completion in Dev Tools helps you suggest the right options at the right place in the query: To get an idea, we can get the mapping of an index in our Elasticsearch cluster: Another way to get an idea about a document in our index, requesting some random documents: Let’s try out some different search queries: Match any document with the play name “Henry V” Get all documents with speech_number lower than or equal to 10: Get all documents in the shakespeare index with speech number between 10 and 20 (including 10 and 20) Get all documents from the shakespeare index from the play name Hamlet between line number 1 and 2 (greater and equal to and lower and equal to) "],["elasticsearch-queries.html", "5 Elasticsearch queries 5.1 Relevance 5.2 Full text queries 5.3 Combining queries", " 5 Elasticsearch queries 5.1 Relevance Let’s experiment with a few search queries to experiment with the relevance: Search for documents that have king or queen in the text_entry field: Search for documents that have king and queen in the text_entry field Search for documents that have eat least 2 of the following terms in the text_entry field: king, queen, kill: 5.2 Full text queries Let’s experiment with some Full Text queries: Search for documents that include the phrase “king and queen”: Search for documents that include the phrase “king and queen” but that are allowed to have a maximum of two other terms between this phrase: In the documents search for the term “Antony” in the play_name, speaker and text_entry fields: Execute the same search, but increase score of hits found in the text_entry by multiplying it with 4: Create a search query for the term “king” in which a spelling error of 1 letter is allowed: 5.3 Combining queries Let’s experiment with some combination of queries: Execute a search for documents that must include the term king and and are ranked higher if they either contain the terms queen, fight, or hail. Execute the same search but make sure the search results eigher must contain at least of the terms queen, fight or hail. Create a search query for documents that contain the term king but do not contain the term queen. "],["aggregations.html", "6 Aggregations 6.1 Metrics 6.2 Buckets 6.3 Combined Aggregations 6.4 Pagination and Pipeline Aggregations", " 6 Aggregations 6.1 Metrics For this lab we will use the other index kibana_sample_data_logs, which is in this course referred to as the “dynamic” dataset. This index consists of dynamic data, which are in this case logs of website: To get an idea of what a document in this looks like, we can execute a match_all search: Find out the total number of bytes, which is a field in the index, for all the log-documents combined in this index: Find out the total number of bytes that only come from Windows 8 requests Find out the average number of bytes. Get both the aggregation and some examples of logs: Get the percentiles of the bytes field: How many different operating systems do we have in our logs? 6.2 Buckets Aggregations: Aggregate the number of total bytes per month. You can use the timestamp field, which is the default for aggregating with datetime-related keys Aggregate the total number of bytes by creating buckets of 2000 Again, aggregate the total number of bytes by creating ranges of: 0 – 3000 – 8000 8000 – 12000 12000 or higher Aggregate the number of bytes per operating system: Aggregate the number of bytes per day and sort it on the largest number of bytes served on a day. Execute the same aggregation, but now, sort it on the`date instead of the count 6.3 Combined Aggregations Combined aggregations: Create an aggregation for counting the number of bytes per day. Order the results from the largest number of bytes in a day, descending order In the same aggregation, divide the results in percentiles of 20, 50 and 75 Create an aggregation that counts the number of log files per month. In each bucket, divide the results over the different operating systems. 6.4 Pagination and Pipeline Aggregations Pagination and Pipeline Aggregations Create a composite aggregation in which we have an interval of 1 hour Create a Pipeline Aggregation which gives us the total number of bytes per month also the max month Create a Pipeline Aggregation in which we show the total number of bytes per month including the cumulative sum for each bucket "],["nodes-and-shards.html", "7 Nodes and Shards 7.1 Running a multi-node cluster 7.2 Adding a second Elasticsearch node locally 7.3 Configure the Elasticsearch nodes for the multi-node cluster 7.4 Configure the cluster value and set the names of the nodes 7.5 Specify the network settings and indicate which node is the master 7.6 Change the security settings 7.7 Start the multi-node cluster 7.8 Check out our cluster in Kibana 7.9 Cluster roles", " 7 Nodes and Shards 7.1 Running a multi-node cluster In this example we will run multiple elasticsearch instances on your local computer. In terms of limited resources, in the examples we will stick with 2 instances. We will achieve this by “creating” another Elasticsearch instance. For this lab, close both Elasticsearch and Kibana if these are still running in the Command Line 7.2 Adding a second Elasticsearch node locally Execute the following steps in your explorer: Open an Explorer (Windows) or Finder (Mac) tab on your machine. Create a new directory called es_nodes. This directory could have any name, but this is quite descriptive for now Drag the .zip file with the fresh Elasticsearch instance in the es_nodes directory. Rename the .zip file to elasticsearch_2. Also this is descriptive enough for now. Extract the zip file Your should now have the following setup: A directory called es_nodes in your Home Directory In the es_nodes directory an instance of Elasticsearch extracted. Optionally you still have the .zip file. You can either leave it or delete it since we do not need it anymore from now on. 7.3 Configure the Elasticsearch nodes for the multi-node cluster Now that we have a “second Elasticsearch” instance, we need to make sure the configuration for both instances is ready to form a 2-node Elasticsearch cluster. Since we now have 2 nodes, we have two locations in which we can set the configuration. The changes we are going to make in our configurations involve: Make sure both nodes are assigned to the same cluster Set or change the names of each node Indicate if the node is a master not or not Specify the network host Specify which other networks to discover In both nodes, indicate which node is the master Change the security settings It might be needed to change the memory settings for the multiple Elasticsearch instances. For both instances, we can change the settings in the config/jvm.options file. For example, we can lower the memory from 4 GB to 2 GB ram by uncommenting and changing the values in the settings. 7.4 Configure the cluster value and set the names of the nodes On the first node, which is the first and initial Elasticsearch instance we configured, make sure you have the following settings: elasticsearch.yml (first node): cluster.name: es-training-cluster node.name: node-1 node.master: true elasticsearch.yml (second node): cluster.name: es-training-cluster node.name: node-2 node.master: false By editing these configurations, we indicated in both nodes to which cluster they belong to, what the name of the node is and if the node is a master-node or not. 7.5 Specify the network settings and indicate which node is the master Next, we need to configure settings about the network to discover. On that network the node will search for a cluster (Elasticsearch instances with only a single node are also considered a cluster). Since we have both these instances running locally, we can specify the value of the network of the machine. The settings must have the same values on both nodes. Therefore, in the configuration files of both the first and second node set or change the following configuration options: elasticsearch.yml (both nodes): network.host: 0.0.0.0 discover.seed_hosts: [“127.0.0.1”] cluster.initial_master_nodes: [“node-1”] 7.6 Change the security settings Since HTTP is used in Node-to-Node communication, it is strongly recommed that in production both security and encryption is enabled. For now, since we focus on having our first multi-node cluster up and running and are not running in production, we leave these security steps for now. In both nodes, for now, disable the security settings by adding a command (#) symbol in front of the configuration setting or delete the entire line. We can add it again when we want to proceed with our single node or when we have the additional settings enabled. Make sure you have saved the configurations all the nodes. 7.7 Start the multi-node cluster Now we have changed the configuration for both our nodes, we will start our cluster. If you haven’t done it yet, close both all the Elasticsearch and Kibana instances: Start the first, master, Elasticsearch node In the Command Line navigate to the Command Line and execute bin\\elasticsearch During the startup, it will indicate that it is the master node of the cluster When the first node is started, we can launch the second node: Start the second,Elasticsearch node In the Command Line navigate to the Command Line to the second Elasticsearch instance which we have called es_nodes. execute bin\\elasticsearch We currently have two Command Line windows open. After the startup of the second node is complete, it tries to look for other running instances on the same network. When the second node has found the already running instance, it will join the cluster as the specified role. Try to locate the following log line in the second Elasticsearch instance: This log message indicates it hast joined the es-training-cluster cluster and recognizes that the first node, Node-1, is the master of this cluster. If we open the Command Line in which the first instance is running, we will notice a log line that indicates another node has joined the cluster. We have now successfully launched a two-node Elasticsearch cluster locally on our machine. We can check for both nodes if they are running by navigating both to: localhost:9200 localhost:9201 7.8 Check out our cluster in Kibana We can open Kibana the same way as was the case when we still had a single node cluster: Open a new Command Line in which we launch Kibana When Kibana is fully started, navigate to the Kibana interface at localhost:5601 Let’s checkout out the settings of our cluster: In Kibana, navigate to the Dev Tools pane We can get an overview of the cluster settings by inserting a query: GET _cluster/health 7.9 Cluster roles Change the settings of the cluster which makes only Node 2 the ingestion node: "],["troubleshooting-and-monitoring.html", "8 Troubleshooting and Monitoring 8.1 Responses and Allocation 8.2 Enabling monitoring 8.3 Stack Monitoring 8.4 Diagnosing Performance Issues", " 8 Troubleshooting and Monitoring 8.1 Responses and Allocation 8.1.1 Checking the health/status Check the health status of the cluster: Check the health status at an index level: Check the health status of the kibana_sample_data_logs index Get an overview of the health status on a shards-level Check the shards allocation 8.2 Enabling monitoring Monitoring pane: Monitoring pane indicates no monitoring setup yet Download Metricbeat https://www.elastic.co/downloads/beats/metricbeat Extract Metricbeat in the Home Directory We first change the configuration of Metricbeat Open Powershell tab: In Powershell, we will install Metricbeat Install the x-pack module Start Metricbeat Once Metricbeat starts working for the current instance, we will get the message in Kibana: 8.3 Stack Monitoring Metricbeat open Stack Monitoring Metricbeat node 1 Metricbeat multiple indices 8.4 Diagnosing Performance Issues First we will change the index by adding an extra replica Find out the thread pool: Check out the status for the thread pools: Pretty print thread pool: Get current tasks: Get the specific nodes: "]]
=======
[["introduction-of-the-r-syntax.html", "Programming and analyzing data with R 1 Introduction of the R syntax 1.1 Variable assignment in R 1.2 Calculations with R 1.3 Statistical functions in R", " Programming and analyzing data with R 1 Introduction of the R syntax 1.1 Variable assignment in R With &lt;- we can assign a value to a variable in R: a &lt;- 10 By using the variable, the assigned value is returned: a ## [1] 10 It is also possible to use = for a assining variables in R. a = 10 a ## [1] 10 Both &lt;- can be used interchangeably Wy different possibilities? &gt; https://www.r-bloggers.com/difference-between-assignment-operators-in-r/ By assigning a new value to an already existing variable, the previously assigned variable will be overwritten: a &lt;- 10 a &lt;- 20 a ## [1] 20 a ## [1] 20 The first assignment of “10” to the a is disappeared. 1.1.1 Vectors in R In R, it is also possible to assign multiple values to a variable. A variable that contains multiple values is called a vector. Even a variable with a single value is also a vector. Notice the notation R returns when we call the a variable. [1] 20 The square brackets [] indicate the position, also called the index, of the value in the vector. Single value variables like our a variable are vectors that exists of a single value. This explains the [1] notation: It is important to notice the index in R starts with 1. In other programming languages, like Python, the index starts at 0. 1.1.2 Assigning multiple values to a variable with the c() function We can assign multiple values to a variable with the c() function. This way, we can create a vector that exists of multiple values. # assigning multiple values to a variable numbers &lt;- c(4,5,2,9,8,3) # showing the values of the variable numbers ## [1] 4 5 2 9 8 3 1.1.3 Getting values by indices in a vector in R Instead of returning all the values from our `numbers variable, we can select specific values by specifying the index. numbers[4] ## [1] 9 It is also possible to select a specific range of values from a vector: # indices 3 to 6 (including 6) numbers[3:6] ## [1] 2 9 8 3 Instead of ranges, it is also to select multiple specific indices: # indices 2 and 4 numbers[c(2,4)] ## [1] 5 9 Of course, it is also possible in combination: selecting a range of indices and specific indices. # indices 2, and 4 to 6 (including 6) numbers[c(2, 4:6)] ## [1] 5 9 8 3 Another situation, is that you like to have all the values of a vector except for one specific index. In this case you can use the setdiff function: # all values of a vector, except the vector on position 3 setdiff(numbers, numbers[3]) ## [1] 4 5 9 8 3 1.1.4 Different data types in R Name Example numeric (float) 3.0 integer (int) 3 character (string) “horse” logical (bool) TRUE factor (string with) String values with levels/hierarchy ** Description **: numeric: Numerical values with decimals integer: Numerical values without decimals character: Textual, alphanumeric values logical: Operators like TRUE of FALSE factor: String values with levels/hierarchy Levels in a factor *The levels in a factor vector can be manually constructed. In the latter chapters of this course we will elaboraty provide examples how to use the factor data type in R and when this data type comes in handy. 1.1.5 Converting to different data types in R Converting a variable with the int data type to a variable with the character data type with the as.character() function age &lt;- as.character(29) age ## [1] &quot;29&quot; In the same way we can use the as.numeric() and as.integer() functions to convert vectors to these data types. Creating a vector with “character” (string) values: currencies &lt;- c(&quot;euro&quot;, &quot;pond&quot;, &quot;dollar&quot;, &quot;yuan&quot;, &quot;roebel&quot;) currencies ## [1] &quot;euro&quot; &quot;pond&quot; &quot;dollar&quot; &quot;yuan&quot; &quot;roebel&quot; Indices work the same for vectors with character values currencies[4] ## [1] &quot;yuan&quot; Converting a vector to a specific data type, like as.character, can also be applied on a vector with multiple values: # create a new vector with integer values ages &lt;- c(17, 54, 81, 13, 27) print(ages) ## [1] 17 54 81 13 27 # convert the &#39;ages&#39; vector to the &#39;character&#39; data type and print the results ages_chr &lt;- as.character(ages) print(ages_chr) ## [1] &quot;17&quot; &quot;54&quot; &quot;81&quot; &quot;13&quot; &quot;27&quot; 1.1.6 The logical data type in R Logical values do no have parentheses (\"): wrong: \"TRUE\" . This is a character value right: TRUE . This is a logical value Logical values can come in handy in case of calculations or during processing data. For example by assigning values based on evaluations or for filtering data. Let’s experiment with this data type with some examples: Assigning a logical value to a vector: # assigning a boolean value FALSE to the &#39;smokes&#39; vector smokes &lt;- FALSE smokes ## [1] FALSE # showing the value of the &#39;smokes&#39; vector class(smokes) ## [1] &quot;logical&quot; Evaluating values will result in a logical value: # evaluate if 4 is larger than 5 4 &gt; 5 ## [1] FALSE # evaluate is 4 + 4 is larger than 7 4 + 4 &gt; 7 ## [1] TRUE # evalueren of 4 + 4 en 3 + 5 allebei gelijk aan 8 zijn 4 + 4 &amp; 3 + 5 == 8 ## [1] TRUE # evaluate if 4 + 4 of 2 + 5 is equal to 8 4 + 4 | 2 + 5 == 8 ## [1] TRUE # evaulate if FALSE, FALSE is TRUE FALSE == FALSE | TRUE ## [1] TRUE *An article on R-bloggers provides a few handy examples with the logical data type: [2] Logical operators in R, (R-bloggers, 2010) 1.2 Calculations with R Just like in many other programming languages, the basic arithmetic operations are possible in R: Operator Function + Addition - Subtraction / Division * Multiplication ^ Power sqrt() Square root 4 + 4 ## [1] 8 4 * 4 ## [1] 16 4 * 4 + 4 ## [1] 20 4 * (4 + 4) ## [1] 32 4 ^ 2 ## [1] 16 4 ^ 3 ## [1] 64 For some operations, R has specific functions. For example, the sqrt() function can be used to calculate the square root. sqrt(16) ## [1] 4 In R it is possible to apply the sum() function to a vector. This will calculate all the values in the vector: numbers &lt;- c(3,5,2,6,6,7,2,11) sum(numbers) ## [1] 42 1.3 Statistical functions in R Since R is originally a Statistical programming language, functions that contain statistical calculations and formulas are also available. To experiment with these functions, we will first generate some random numbers: set.seed(123) numbers &lt;- sample(1:100, 100, replace=TRUE) numbers ## [1] 31 79 51 14 67 42 50 43 14 25 90 91 69 91 57 92 9 93 99 72 26 7 42 9 83 ## [26] 36 78 81 43 76 15 32 7 9 41 74 23 27 60 53 7 53 27 96 38 89 34 93 69 72 ## [51] 76 63 13 82 97 91 25 38 21 79 41 47 90 60 95 16 94 6 72 86 86 39 31 81 50 ## [76] 34 4 13 69 25 52 22 89 32 25 87 35 40 30 12 31 30 64 99 14 93 96 71 67 23 The set.seed() function is used to make sure you get the same random numbers as in the example. 1.3.1 Exploring the data We can use the head() function to get the first number of values from a vector. By default, the head() function will return the first 6 values. head(numbers) ## [1] 31 79 51 14 67 42 We can add an additional parameter to the head() function to indicate how many from the first values we would like to get: head(numbers, 2) ## [1] 31 79 With the tail() function, we can get the last values from a vector. It works the same as the head() function: tail(numbers) ## [1] 14 93 96 71 67 23 1.3.2 Statistical functions for data exploration in R We can get a statistical summary of the vector with the summary() function. summary(numbers) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.00 26.75 50.00 52.15 79.50 99.00 Calculating the mean of a vector: mean(numbers) ## [1] 52.15 Calculating the minimum or maximum of a vector with min() and max() min(numbers) ## [1] 4 max(numbers) ## [1] 99 We can even get the value of pi with the pi variable which is by default available: pi ## [1] 3.141593 Standard deviation: sd(numbers) ## [1] 29.57592 Variance: var(numbers) ## [1] 874.7348 We will dive deeper into the statistical possibilities of R in the latter chapters, for example Linear Regression models, t-tests and ANOVA. "],["working-with-data-frames-in-r.html", "2 Working with Data Frames in R 2.1 The example dataset 2.2 Importing data with RStudio 2.3 Exploring data frames in R 2.4 Data exploration with basic R visualisations", " 2 Working with Data Frames in R 2.1 The example dataset The data.frame structure in R is the main data structure for storing and analyzing data. For example, when a csv-file is imported into the R session, it becomes a data frame. To explore how to work with data frames in R, we will use a dataset that is widely used for different statistical experimens. This dataset is called the German Credit Data dataset. We can import this dataset from: https://archive.ics.uci.edu/ml/datasets/statlog+(german+credit+data) In the example this dataset is saved as “german_data_clean.csv” in our working directory. To keep your project tidy, you might consider creating an extra folder in which you want to store all your datasets. In this example project we have created a directory called data: 2.2 Importing data with RStudio In RStudio, it is easy to import a csv dataset into our current R session: RStudio shows us a preview of the dataset we select to open: Opening the dataset in R will generate the R code that is needed to import the dataset in the R-session: library(readr) german_data_clean &lt;- read_csv(&quot;data/german_data_clean.csv&quot;) ## Rows: 1000 Columns: 21 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (13): checking_account, credit_history, purpose, savings, present_employ... ## dbl (8): duration_months, credit_amount, installment_rate, present_residenc... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. View(german_data_clean) Note that you do not have to type in this code yourself, this code is automatically generated when we import our dataset with the Import Dataset button in RStudio. 2.3 Exploring data frames in R Now the dataset is imported as a data frame in R, we can use many functions of R to select or modify this dataset. For our convenience, we will rename the dataset for now: data &lt;- german_data_clean rm(german_data_clean) Showing the dimensions of the data frame dim(data) ## [1] 1000 21 Number of rows of the data frame nrow(data) ## [1] 1000 Number of columns of the data frame ncol(data) ## [1] 21 Column names of the data frame names(data) ## [1] &quot;checking_account&quot; &quot;duration_months&quot; ## [3] &quot;credit_history&quot; &quot;purpose&quot; ## [5] &quot;credit_amount&quot; &quot;savings&quot; ## [7] &quot;present_employment_since&quot; &quot;installment_rate&quot; ## [9] &quot;personal_status_sex&quot; &quot;other_deptors&quot; ## [11] &quot;present_residence&quot; &quot;property&quot; ## [13] &quot;age_years&quot; &quot;other_installment_plans&quot; ## [15] &quot;housing&quot; &quot;existing_credits&quot; ## [17] &quot;job&quot; &quot;people_liable_maintenance&quot; ## [19] &quot;telephone&quot; &quot;foreign_worker&quot; ## [21] &quot;response&quot; Informative description of the data frame str(data) ## spec_tbl_df [1,000 × 21] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ checking_account : chr [1:1000] &quot;... &lt; 0 euro&quot; &quot;0 &lt;= ... &lt; 102 euro&quot; &quot;No checking account&quot; &quot;... &lt; 0 euro&quot; ... ## $ duration_months : num [1:1000] 6 48 12 42 24 36 24 36 12 30 ... ## $ credit_history : chr [1:1000] &quot;critical account/other credits existing (not at this bank)&quot; &quot;existing credits paid back duly till now&quot; &quot;critical account/other credits existing (not at this bank)&quot; &quot;existing credits paid back duly till now&quot; ... ## $ purpose : chr [1:1000] &quot;radio/television&quot; &quot;radio/television&quot; &quot;education&quot; &quot;furniture/equipment&quot; ... ## $ credit_amount : num [1:1000] 1169 5951 2096 7882 4870 ... ## $ savings : chr [1:1000] &quot;unknown/ no savings account&quot; &quot;... &lt; 51 euro&quot; &quot;... &lt; 51 euro&quot; &quot;... &lt; 51 euro&quot; ... ## $ present_employment_since : chr [1:1000] &quot;.. &gt;= 7 years&quot; &quot;1 &lt;= ... &lt; 4 years&quot; &quot;4 &lt;= ... &lt; 7 years&quot; &quot;4 &lt;= ... &lt; 7 years&quot; ... ## $ installment_rate : num [1:1000] 4 2 2 2 3 2 3 2 2 4 ... ## $ personal_status_sex : chr [1:1000] &quot;male : single&quot; &quot;female : divorced/separated/married&quot; &quot;male : single&quot; &quot;male : single&quot; ... ## $ other_deptors : chr [1:1000] &quot;none&quot; &quot;none&quot; &quot;none&quot; &quot;guarantor&quot; ... ## $ present_residence : num [1:1000] 4 2 3 4 4 4 4 2 4 2 ... ## $ property : chr [1:1000] &quot;real estate&quot; &quot;real estate&quot; &quot;real estate&quot; &quot;(if not real estate) building society savings agreement/ life insurance&quot; ... ## $ age_years : num [1:1000] 67 22 49 45 53 35 53 35 61 28 ... ## $ other_installment_plans : chr [1:1000] &quot;none&quot; &quot;none&quot; &quot;none&quot; &quot;none&quot; ... ## $ housing : chr [1:1000] &quot;own&quot; &quot;own&quot; &quot;own&quot; &quot;for free&quot; ... ## $ existing_credits : num [1:1000] 2 1 1 1 2 1 1 1 1 2 ... ## $ job : chr [1:1000] &quot;skilled employee / official&quot; &quot;skilled employee / official&quot; &quot;unskilled - resident&quot; &quot;skilled employee / official&quot; ... ## $ people_liable_maintenance: num [1:1000] 1 1 2 2 2 2 1 1 1 1 ... ## $ telephone : chr [1:1000] &quot;yes, registered under the customers name&quot; &quot;none&quot; &quot;none&quot; &quot;none&quot; ... ## $ foreign_worker : chr [1:1000] &quot;yes&quot; &quot;yes&quot; &quot;yes&quot; &quot;yes&quot; ... ## $ response : num [1:1000] 0 1 0 0 1 0 0 0 0 1 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. checking_account = col_character(), ## .. duration_months = col_double(), ## .. credit_history = col_character(), ## .. purpose = col_character(), ## .. credit_amount = col_double(), ## .. savings = col_character(), ## .. present_employment_since = col_character(), ## .. installment_rate = col_double(), ## .. personal_status_sex = col_character(), ## .. other_deptors = col_character(), ## .. present_residence = col_double(), ## .. property = col_character(), ## .. age_years = col_double(), ## .. other_installment_plans = col_character(), ## .. housing = col_character(), ## .. existing_credits = col_double(), ## .. job = col_character(), ## .. people_liable_maintenance = col_double(), ## .. telephone = col_character(), ## .. foreign_worker = col_character(), ## .. response = col_double() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; Selecting a column of the data frame data$credit_amount ## [1] 1169 5951 2096 7882 4870 9055 2835 6948 3059 5234 1295 4308 ## [13] 1567 1199 1403 1282 2424 8072 12579 3430 2134 2647 2241 1804 ## [25] 2069 1374 426 409 2415 6836 1913 4020 5866 1264 1474 4746 ## [37] 6110 2100 1225 458 2333 1158 6204 6187 6143 1393 2299 1352 ## [49] 7228 2073 2333 5965 1262 3378 2225 783 6468 9566 1961 6229 ## [61] 1391 1537 1953 14421 3181 5190 2171 1007 1819 2394 8133 730 ## [73] 1164 5954 1977 1526 3965 4771 9436 3832 5943 1213 1568 1755 ## [85] 2315 1412 1295 12612 2249 1108 618 1409 797 3617 1318 15945 ## [97] 2012 2622 2337 7057 1469 2323 932 1919 2445 11938 6458 6078 ## [109] 7721 1410 1449 392 6260 7855 1680 3578 7174 2132 4281 2366 ## [121] 1835 3868 1768 781 1924 2121 701 639 1860 3499 8487 6887 ## [133] 2708 1984 10144 1240 8613 766 2728 1881 709 4795 3416 2462 ## [145] 2288 3566 860 682 5371 1582 1346 1924 5848 7758 6967 1282 ## [157] 1288 339 3512 1898 2872 1055 1262 7308 909 2978 1131 1577 ## [169] 3972 1935 950 763 2064 1414 3414 7485 2577 338 1963 571 ## [181] 9572 4455 1647 3777 884 1360 5129 1175 674 3244 4591 3844 ## [193] 3915 2108 3031 1501 1382 951 2760 4297 936 1168 5117 902 ## [205] 1495 10623 1935 1424 6568 1413 3074 3835 5293 1908 3342 932 ## [217] 3104 3913 3021 1364 625 1200 707 2978 4657 2613 10961 7865 ## [229] 1478 3149 4210 2507 2141 866 1544 1823 14555 2767 1291 2522 ## [241] 915 1595 4605 1185 3447 1258 717 1204 1925 433 666 2251 ## [253] 2150 4151 2030 7418 2684 2149 3812 1154 1657 1603 5302 2748 ## [265] 1231 802 6304 1533 8978 999 2662 1402 12169 3060 11998 2697 ## [277] 2404 1262 4611 1901 3368 1574 1445 1520 3878 10722 4788 7582 ## [289] 1092 1024 1076 9398 6419 4796 7629 9960 4675 1287 2515 2745 ## [301] 672 3804 1344 1038 10127 1543 4811 727 1237 276 5381 5511 ## [313] 3749 685 1494 2746 708 4351 701 3643 4249 1938 2910 2659 ## [325] 1028 3398 5801 1525 4473 1068 6615 1864 7408 11590 4110 3384 ## [337] 2101 1275 4169 1521 5743 3599 3213 4439 3949 1459 882 3758 ## [349] 1743 1136 1236 959 3229 6199 727 1246 2331 4463 776 2406 ## [361] 1239 3399 2247 1766 2473 1542 3850 3650 3446 3001 3079 6070 ## [373] 2146 13756 14782 7685 2320 846 14318 362 2212 12976 1283 1330 ## [385] 4272 2238 1126 7374 2326 1449 1820 983 3249 1957 2406 11760 ## [397] 2578 2348 1223 1516 1473 1887 8648 802 2899 2039 2197 1053 ## [409] 3235 939 1967 7253 2292 1597 1381 5842 2579 8471 2782 1042 ## [421] 3186 2028 958 1591 2762 2779 2743 1149 1313 1190 3448 11328 ## [433] 1872 2058 2136 1484 660 1287 3394 609 1884 1620 2629 719 ## [445] 5096 1244 1842 2576 1424 1512 11054 518 2759 2670 4817 2679 ## [457] 3905 3386 343 4594 3620 1721 3017 754 1950 2924 1659 7238 ## [469] 2764 4679 3092 448 654 1238 1245 3114 2569 5152 1037 1478 ## [481] 3573 1201 3622 960 1163 1209 3077 3757 1418 3518 1934 8318 ## [493] 1237 368 2122 2996 9034 1585 1301 1323 3123 5493 1126 1216 ## [505] 1207 1309 2360 6850 1413 8588 759 4686 2687 585 2255 609 ## [517] 1361 7127 1203 700 5507 3190 7119 3488 1113 7966 1532 1503 ## [529] 2302 662 2273 2631 1503 1311 3105 2319 1374 3612 7763 3049 ## [541] 1534 2032 6350 2864 1255 1333 2022 1552 626 8858 996 1750 ## [553] 6999 1995 1199 1331 2278 5003 3552 1928 2964 1546 683 12389 ## [565] 4712 1553 1372 2578 3979 6758 3234 5954 5433 806 1082 2788 ## [577] 2930 1927 2820 937 1056 3124 1388 2384 2133 2039 2799 1289 ## [589] 1217 2246 385 1965 1572 2718 1358 931 1442 4241 2775 3863 ## [601] 2329 918 1837 3349 1275 2828 4526 2671 2051 1300 741 1240 ## [613] 3357 3632 1808 12204 9157 3676 3441 640 3652 1530 3914 1858 ## [625] 2600 1979 2116 1437 4042 3832 3660 1553 1444 1980 1355 1393 ## [637] 1376 15653 1493 4370 750 1308 4623 1851 1880 7980 4583 1386 ## [649] 947 684 7476 1922 2303 8086 2346 3973 888 10222 4221 6361 ## [661] 1297 900 2241 1050 1047 6314 3496 3609 4843 3017 4139 5742 ## [673] 10366 2080 2580 4530 5150 5595 2384 1453 1538 2279 1478 5103 ## [685] 9857 6527 1347 2862 2753 3651 975 2631 2896 4716 2284 1236 ## [697] 1103 926 1800 1905 1123 6331 1377 2503 2528 5324 6560 2969 ## [709] 1206 2118 629 1198 2476 1138 14027 7596 3077 1505 3148 6148 ## [721] 1337 433 1228 790 2570 250 1316 1882 6416 1275 6403 1987 ## [733] 760 2603 3380 3990 11560 4380 6761 4280 2325 1048 3160 2483 ## [745] 14179 1797 2511 1274 5248 3029 428 976 841 5771 1555 1285 ## [757] 1299 1271 1393 691 5045 2124 2214 12680 2463 1155 3108 2901 ## [769] 3617 1655 2812 8065 3275 2223 1480 1371 3535 3509 5711 3872 ## [781] 4933 1940 1410 836 6468 1941 2675 2751 6224 5998 1188 6313 ## [793] 1221 2892 3062 2301 7511 1258 717 1549 1597 1795 4272 976 ## [805] 7472 9271 590 930 9283 1778 907 484 9629 3051 3931 7432 ## [817] 1338 1554 15857 1345 1101 3016 2712 731 3780 1602 3966 4165 ## [829] 8335 6681 2375 1216 11816 5084 2327 1082 886 601 2957 2611 ## [841] 5179 2993 1943 1559 3422 3976 6761 1249 1364 709 2235 4042 ## [853] 1471 1442 10875 1474 894 3343 3959 3577 5804 2169 2439 4526 ## [865] 2210 2221 2389 3331 7409 652 7678 1343 1382 874 3590 1322 ## [877] 1940 3595 1422 6742 7814 9277 2181 1098 4057 795 2825 15672 ## [889] 6614 7824 2442 1829 2171 5800 1169 8947 2606 1592 2186 4153 ## [901] 2625 3485 10477 1386 1278 1107 3763 3711 3594 3195 4454 4736 ## [913] 2991 2142 3161 18424 2848 14896 2359 3345 1817 12749 1366 2002 ## [925] 6872 697 1049 10297 1867 1344 1747 1670 1224 522 1498 1919 ## [937] 745 2063 6288 6842 3527 1546 929 1455 1845 8358 3349 2859 ## [949] 1533 3621 3590 2145 4113 10974 1893 1231 3656 1154 4006 3069 ## [961] 1740 2353 3556 2397 454 1715 2520 3568 7166 3939 1514 7393 ## [973] 1193 7297 2831 1258 753 2427 2538 1264 8386 4844 2923 8229 ## [985] 2028 1433 6289 1409 6579 1743 3565 1569 1936 3959 2390 1736 ## [997] 3857 804 1845 4576 An alternative for selecting a column of a data frame: data[&quot;credit_amount&quot;] ## # A tibble: 1,000 × 1 ## credit_amount ## &lt;dbl&gt; ## 1 1169 ## 2 5951 ## 3 2096 ## 4 7882 ## 5 4870 ## 6 9055 ## 7 2835 ## 8 6948 ## 9 3059 ## 10 5234 ## # … with 990 more rows Providing a summary of a variable: summary(data$credit_amount) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 250 1366 2320 3271 3972 18424 Providing a summary of the entire data frame summary(data) ## checking_account duration_months credit_history purpose ## Length:1000 Min. : 4.0 Length:1000 Length:1000 ## Class :character 1st Qu.:12.0 Class :character Class :character ## Mode :character Median :18.0 Mode :character Mode :character ## Mean :20.9 ## 3rd Qu.:24.0 ## Max. :72.0 ## credit_amount savings present_employment_since installment_rate ## Min. : 250 Length:1000 Length:1000 Min. :1.000 ## 1st Qu.: 1366 Class :character Class :character 1st Qu.:2.000 ## Median : 2320 Mode :character Mode :character Median :3.000 ## Mean : 3271 Mean :2.973 ## 3rd Qu.: 3972 3rd Qu.:4.000 ## Max. :18424 Max. :4.000 ## personal_status_sex other_deptors present_residence property ## Length:1000 Length:1000 Min. :1.000 Length:1000 ## Class :character Class :character 1st Qu.:2.000 Class :character ## Mode :character Mode :character Median :3.000 Mode :character ## Mean :2.845 ## 3rd Qu.:4.000 ## Max. :4.000 ## age_years other_installment_plans housing existing_credits ## Min. :19.00 Length:1000 Length:1000 Min. :1.000 ## 1st Qu.:27.00 Class :character Class :character 1st Qu.:1.000 ## Median :33.00 Mode :character Mode :character Median :1.000 ## Mean :35.55 Mean :1.407 ## 3rd Qu.:42.00 3rd Qu.:2.000 ## Max. :75.00 Max. :4.000 ## job people_liable_maintenance telephone ## Length:1000 Min. :1.000 Length:1000 ## Class :character 1st Qu.:1.000 Class :character ## Mode :character Median :1.000 Mode :character ## Mean :1.155 ## 3rd Qu.:1.000 ## Max. :2.000 ## foreign_worker response ## Length:1000 Min. :0.0 ## Class :character 1st Qu.:0.0 ## Mode :character Median :0.0 ## Mean :0.3 ## 3rd Qu.:1.0 ## Max. :1.0 Getting the maximum value of a variable max(data$credit_amount) ## [1] 18424 In some cases character variables of the data frame can be better described in combination with the factor function. # not a useful description summary(data$telephone) ## Length Class Mode ## 1000 character character # better summary(factor(data$property)) ## (if not optin 1 or 2) car or other, not in attribute ## 332 ## (if not real estate) building society savings agreement/ life insurance ## 232 ## real estate ## 282 ## unknown / no property ## 154 2.3.1 Selecting rows and columns in a data frame Selecting rows data[3:10,] ## # A tibble: 8 × 21 ## checking_account duration_months credit_history purpose credit_amount savings ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 No checking acco… 12 critical acco… educat… 2096 ... &lt; … ## 2 ... &lt; 0 euro 42 existing cred… furnit… 7882 ... &lt; … ## 3 ... &lt; 0 euro 24 delay in payi… car (n… 4870 ... &lt; … ## 4 No checking acco… 36 existing cred… educat… 9055 unknow… ## 5 No checking acco… 24 existing cred… furnit… 2835 255 eu… ## 6 0 &lt;= ... &lt; 102 … 36 existing cred… car (u… 6948 ... &lt; … ## 7 No checking acco… 12 existing cred… radio/… 3059 .. &gt;= … ## 8 0 &lt;= ... &lt; 102 … 30 critical acco… car (n… 5234 ... &lt; … ## # … with 15 more variables: present_employment_since &lt;chr&gt;, ## # installment_rate &lt;dbl&gt;, personal_status_sex &lt;chr&gt;, other_deptors &lt;chr&gt;, ## # present_residence &lt;dbl&gt;, property &lt;chr&gt;, age_years &lt;dbl&gt;, ## # other_installment_plans &lt;chr&gt;, housing &lt;chr&gt;, existing_credits &lt;dbl&gt;, ## # job &lt;chr&gt;, people_liable_maintenance &lt;dbl&gt;, telephone &lt;chr&gt;, ## # foreign_worker &lt;chr&gt;, response &lt;dbl&gt; Selecting columns data[,4] ## # A tibble: 1,000 × 1 ## purpose ## &lt;chr&gt; ## 1 radio/television ## 2 radio/television ## 3 education ## 4 furniture/equipment ## 5 car (new) ## 6 education ## 7 furniture/equipment ## 8 car (used) ## 9 radio/television ## 10 car (new) ## # … with 990 more rows Selecting multiple rows # rij 5 t/m 10 selecteren data[5:10, ] ## # A tibble: 6 × 21 ## checking_account duration_months credit_history purpose credit_amount savings ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ... &lt; 0 euro 24 delay in payi… car (n… 4870 ... &lt; … ## 2 No checking acco… 36 existing cred… educat… 9055 unknow… ## 3 No checking acco… 24 existing cred… furnit… 2835 255 eu… ## 4 0 &lt;= ... &lt; 102 … 36 existing cred… car (u… 6948 ... &lt; … ## 5 No checking acco… 12 existing cred… radio/… 3059 .. &gt;= … ## 6 0 &lt;= ... &lt; 102 … 30 critical acco… car (n… 5234 ... &lt; … ## # … with 15 more variables: present_employment_since &lt;chr&gt;, ## # installment_rate &lt;dbl&gt;, personal_status_sex &lt;chr&gt;, other_deptors &lt;chr&gt;, ## # present_residence &lt;dbl&gt;, property &lt;chr&gt;, age_years &lt;dbl&gt;, ## # other_installment_plans &lt;chr&gt;, housing &lt;chr&gt;, existing_credits &lt;dbl&gt;, ## # job &lt;chr&gt;, people_liable_maintenance &lt;dbl&gt;, telephone &lt;chr&gt;, ## # foreign_worker &lt;chr&gt;, response &lt;dbl&gt; Selecting row 5 to 10 and column 9 to 11 data[5:10, c(&#39;purpose&#39;, &#39;age_years&#39;)] ## # A tibble: 6 × 2 ## purpose age_years ## &lt;chr&gt; &lt;dbl&gt; ## 1 car (new) 53 ## 2 education 35 ## 3 furniture/equipment 53 ## 4 car (used) 35 ## 5 radio/television 61 ## 6 car (new) 28 Selecting row 1, 3, 5, 7 and column 2, 4, 6, 8: data[c(1,3,5,7), c(2,4,6,8)] ## # A tibble: 4 × 4 ## duration_months purpose savings installment_rate ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 6 radio/television unknown/ no savings account 4 ## 2 12 education ... &lt; 51 euro 2 ## 3 24 car (new) ... &lt; 51 euro 3 ## 4 24 furniture/equipment 255 euro &lt;= ... &lt; 511 euro 3 2.3.2 Filtering data frames Loans with a minimal duration of 20 (months) data[data$duration_months &gt;= 20, ] ## # A tibble: 454 × 21 ## checking_account duration_months credit_history purpose credit_amount savings ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 0 &lt;= ... &lt; 102… 48 existing cred… radio/… 5951 ... &lt; … ## 2 ... &lt; 0 euro 42 existing cred… furnit… 7882 ... &lt; … ## 3 ... &lt; 0 euro 24 delay in payi… car (n… 4870 ... &lt; … ## 4 No checking acc… 36 existing cred… educat… 9055 unknow… ## 5 No checking acc… 24 existing cred… furnit… 2835 255 eu… ## 6 0 &lt;= ... &lt; 102… 36 existing cred… car (u… 6948 ... &lt; … ## 7 0 &lt;= ... &lt; 102… 30 critical acco… car (n… 5234 ... &lt; … ## 8 ... &lt; 0 euro 48 existing cred… busine… 4308 ... &lt; … ## 9 ... &lt; 0 euro 24 critical acco… car (n… 1199 ... &lt; … ## 10 ... &lt; 0 euro 24 existing cred… radio/… 1282 51 &lt;= … ## # … with 444 more rows, and 15 more variables: present_employment_since &lt;chr&gt;, ## # installment_rate &lt;dbl&gt;, personal_status_sex &lt;chr&gt;, other_deptors &lt;chr&gt;, ## # present_residence &lt;dbl&gt;, property &lt;chr&gt;, age_years &lt;dbl&gt;, ## # other_installment_plans &lt;chr&gt;, housing &lt;chr&gt;, existing_credits &lt;dbl&gt;, ## # job &lt;chr&gt;, people_liable_maintenance &lt;dbl&gt;, telephone &lt;chr&gt;, ## # foreign_worker &lt;chr&gt;, response &lt;dbl&gt; Filter for single males # first, checkout what the values look like that we would like to filter unique(data$personal_status_sex) ## [1] &quot;male : single&quot; &quot;female : divorced/separated/married&quot; ## [3] &quot;male : divorced/separated&quot; &quot;male : married/widowed&quot; single_males &lt;- data[data$personal_status_sex == &quot;male : single&quot;, ] Displaying the data single_males ## # A tibble: 548 × 21 ## checking_account duration_months credit_history purpose credit_amount savings ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ... &lt; 0 euro 6 critical acco… radio/… 1169 unknow… ## 2 No checking acc… 12 critical acco… educat… 2096 ... &lt; … ## 3 ... &lt; 0 euro 42 existing cred… furnit… 7882 ... &lt; … ## 4 ... &lt; 0 euro 24 delay in payi… car (n… 4870 ... &lt; … ## 5 No checking acc… 36 existing cred… educat… 9055 unknow… ## 6 No checking acc… 24 existing cred… furnit… 2835 255 eu… ## 7 0 &lt;= ... &lt; 102… 36 existing cred… car (u… 6948 ... &lt; … ## 8 ... &lt; 0 euro 24 critical acco… car (n… 1199 ... &lt; … ## 9 No checking acc… 24 critical acco… radio/… 2424 unknow… ## 10 ... &lt; 0 euro 30 no credits ta… busine… 8072 unknow… ## # … with 538 more rows, and 15 more variables: present_employment_since &lt;chr&gt;, ## # installment_rate &lt;dbl&gt;, personal_status_sex &lt;chr&gt;, other_deptors &lt;chr&gt;, ## # present_residence &lt;dbl&gt;, property &lt;chr&gt;, age_years &lt;dbl&gt;, ## # other_installment_plans &lt;chr&gt;, housing &lt;chr&gt;, existing_credits &lt;dbl&gt;, ## # job &lt;chr&gt;, people_liable_maintenance &lt;dbl&gt;, telephone &lt;chr&gt;, ## # foreign_worker &lt;chr&gt;, response &lt;dbl&gt; Apply multiple filters data[data$personal_status_sex == &quot;male : single&quot; &amp; data$age_years &gt; 60 , ] ## # A tibble: 30 × 21 ## checking_account duration_months credit_history purpose credit_amount savings ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 ... &lt; 0 euro 6 critical acco… radio/… 1169 unknow… ## 2 ... &lt; 0 euro 60 delay in payi… busine… 6836 ... &lt; … ## 3 0 &lt;= ... &lt; 102… 36 no credits ta… busine… 1953 ... &lt; … ## 4 ... &lt; 0 euro 12 critical acco… car (u… 1526 ... &lt; … ## 5 &gt;= 102 euro 10 critical acco… car (n… 781 ... &lt; … ## 6 0 &lt;= ... &lt; 102… 12 existing cred… radio/… 766 255 eu… ## 7 0 &lt;= ... &lt; 102… 10 existing cred… car (n… 7308 ... &lt; … ## 8 ... &lt; 0 euro 21 critical acco… car (n… 571 ... &lt; … ## 9 0 &lt;= ... &lt; 102… 16 critical acco… car (n… 1175 ... &lt; … ## 10 &gt;= 102 euro 30 delay in payi… busine… 1908 ... &lt; … ## # … with 20 more rows, and 15 more variables: present_employment_since &lt;chr&gt;, ## # installment_rate &lt;dbl&gt;, personal_status_sex &lt;chr&gt;, other_deptors &lt;chr&gt;, ## # present_residence &lt;dbl&gt;, property &lt;chr&gt;, age_years &lt;dbl&gt;, ## # other_installment_plans &lt;chr&gt;, housing &lt;chr&gt;, existing_credits &lt;dbl&gt;, ## # job &lt;chr&gt;, people_liable_maintenance &lt;dbl&gt;, telephone &lt;chr&gt;, ## # foreign_worker &lt;chr&gt;, response &lt;dbl&gt; Creating calculated columns with the ifelse() function: data$duration_type &lt;- ifelse(data$duration_months &lt;= 12, &quot;short&quot;, &quot;long&quot;) Show the values of the newly created column summary(factor(data$duration_type)) ## long short ## 641 359 Categorieen maken met nested data$age_class &lt;- cut(data$age_years, breaks = c(18, 25, 50, 65, 100), labels=c(&quot;young&quot;, &quot;adult&quot;, &quot;senior&quot;, &quot;retired&quot;)) data$age_class &lt;- cut(data$age_years, breaks = c(18, 25, 50, 65, 100), labels=c(&quot;young&quot;, &quot;adult&quot;, &quot;senior&quot;, &quot;retired&quot;)) Check the categories: summary.factor(data$age_class) ## young adult senior retired ## 190 697 95 18 table(data$age_class) ## ## young adult senior retired ## 190 697 95 18 2.4 Data exploration with basic R visualisations counts &lt;- table(data$age_class) barplot(counts, main=&quot;Loans by age class&quot;, xlab=&quot;Age class&quot;) numbers &lt;- c(1,2,3,4,5) barplot(numbers) Additional markup options for the visualisation: barplot(counts, width = 3, space = 0, col = &quot;blue&quot;, main = &quot;Number of loans by Age Class&quot;, xlab = &quot;Age class&quot;, ylab = &quot;Aantal&quot;) A simple scatter plot plot(data$credit_amount, type = &quot;l&quot;, lwd = &quot;4&quot;, col= &quot;#000000&quot;, main = &quot;Credit amount&quot;) Boxplot boxplot(data$credit_amount, notch = TRUE, col = &quot;red&quot;, names = &quot;Credit amount&quot;) Creating a boxplot without outliers boxplot(data$credit_amount, notch = TRUE, col = &quot;red&quot;, names = &quot;Credit amount&quot;, outline = FALSE) Creating a pie chart pie(counts) pie(counts, labels = names(counts), main=&quot;Age class&quot;) pie(counts, labels = names(counts), main=&quot;Loans by age class&quot;, col = c(&quot;lightblue&quot;, &quot;blue&quot;, &quot;darkblue&quot;, &quot;gray&quot;), sub = &quot;Source: Loan research 2019: Arie Twigt&quot;) Histogram hist(data$credit_amount) hist(data$credit_amount, breaks = 5) Plotting the distribution of a variable: plot(density(data$credit_amount)) "],["using-the-dplyr-package-in-r-for-data-wrangling.html", "3 Using the dplyr package in R for data wrangling 3.1 Installing and loading the dplyr package 3.2 Creating subsets of a data frame with dplyr 3.3 Combining dplyr for creating visualisations for specific subsets 3.4 Creating subsets and aggregations in dplyr", " 3 Using the dplyr package in R for data wrangling 3.1 Installing and loading the dplyr package Installing the dplyr package: install.packages(&#39;dplyr&#39;) Using the library() to open our package library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union 3.2 Creating subsets of a data frame with dplyr Base R: older_30 &lt;- data[data$age_years &gt;= 30,] older_30 &lt;- older_30[, c(&quot;age_years&quot;, &quot;personal_status_sex&quot;, &quot;credit_amount&quot;)] older_30 &lt;- older_30[sort(older_30$age_years),] dplyr: older_30_2 &lt;- data %&gt;% filter(age_years &gt;= 30) %&gt;% select(age_years, personal_status_sex, credit_amount) %&gt;% arrange(age_years) head(older_30_2) ## # A tibble: 6 × 3 ## age_years personal_status_sex credit_amount ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 30 male : single 5866 ## 2 30 male : single 2333 ## 3 30 male : single 5965 ## 4 30 female : divorced/separated/married 8133 ## 5 30 male : single 2249 ## 6 30 female : divorced/separated/married 7721 Examples: Only divorsed men Minimum age of 18 Loans for: \"car (new)\", \"radio/television\" or \"furniture/equipment\" : Only select the following columns: \"age_years\" \"duration_months\" \"credit_amount\" \"purpose\" \"response\" Sorted on \"credit_amount\" from high to low (descending) Let’s see how we can create this subset with using the dplyr functionality: selected_purposes &lt;- c(&quot;car (new)&quot;, &quot;radio/television&quot;, &quot;furniture/equipment&quot;) subset_1 &lt;- data %&gt;% select(age_years, duration_months, credit_amount, purpose, personal_status_sex, response) %&gt;% filter(personal_status_sex == &quot;male : divorced/separated&quot;) %&gt;% filter(age_years &gt;= 18) %&gt;% filter(purpose %in% selected_purposes) %&gt;% arrange(desc(credit_amount)) Check out the subset: subset_1 ## # A tibble: 32 × 6 ## age_years duration_months credit_amount purpose personal_status_… response ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 45 14 8978 car (new) male : divorce… 1 ## 2 55 24 6872 furniture… male : divorce… 1 ## 3 32 30 4583 furniture… male : divorce… 0 ## 4 40 18 4297 furniture… male : divorce… 1 ## 5 43 24 4057 furniture… male : divorce… 1 ## 6 37 24 3878 car (new) male : divorce… 0 ## 7 35 18 3780 furniture… male : divorce… 0 ## 8 44 20 3485 car (new) male : divorce… 0 ## 9 44 6 3384 furniture… male : divorce… 1 ## 10 26 24 3235 radio/tel… male : divorce… 0 ## # … with 22 more rows 3.3 Combining dplyr for creating visualisations for specific subsets hist(subset_1$credit_amount, breaks = 30) pie(subset_1$credit_amount, labels = subset_1$purpose) Now, let’s show a pie chart for our subset: subset_1_grouped &lt;- subset_1 %&gt;% group_by(purpose) %&gt;% summarize(total_amount = sum(credit_amount)) pie(subset_1_grouped$total_amount, labels = subset_1_grouped$purpose, main = &quot;Loans and purposes.&quot;) Challenge: We will try to create the following subset: * Only women (divorced, married, single) * All ages * Only loans for \"education\", \"retraining\" \"business\", \"other\": * Only the following columns: * \"age_years\" * \"personal_status_sex\" * \"credit_amount\" * \"purpose\" * \"response\" * Sorted on \"age_years\" descending Visualizing the proportion of women that paid back the loan (\"response\"). selected_purposes &lt;- c(&quot;education&quot;, &quot;retraining&quot;, &quot;business&quot;, &quot;other&quot;) subset_2 &lt;- data %&gt;% filter(personal_status_sex == &quot;female : divorced/separated/married&quot;) %&gt;% filter(purpose %in% selected_purposes) %&gt;% select(age_years, duration_months, credit_amount, purpose, response) %&gt;% arrange(desc(age_years)) Check out our subset: head(subset_2) ## # A tibble: 6 × 5 ## age_years duration_months credit_amount purpose response ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 67 9 1199 education 0 ## 2 61 12 2012 education 0 ## 3 59 48 6416 business 1 ## 4 57 12 2748 education 0 ## 5 56 6 1538 education 0 ## 6 53 12 795 education 1 barplot(table(subset_2$response)) 3.4 Creating subsets and aggregations in dplyr Challange: We want to create two bar charts, one for men and one for women, that show the avarage (mean) loan aount grouped by each different purpose: men_woman &lt;- data %&gt;% mutate(gender = ifelse(personal_status_sex != &quot;female : divorced/separated/married&quot;, &quot;man&quot;, &quot;vrouw&quot;)) %&gt;% select(gender, purpose, credit_amount) %&gt;% group_by(gender, purpose) %&gt;% summarise(mean_amount = mean(credit_amount)) ## `summarise()` has grouped output by &#39;gender&#39;. You can override using the `.groups` argument. men_woman ## # A tibble: 20 × 3 ## # Groups: gender [2] ## gender purpose mean_amount ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 man business 4393. ## 2 man car (new) 3290. ## 3 man car (used) 5235. ## 4 man domestic appliances 1586. ## 5 man education 3899. ## 6 man furniture/equipment 3269. ## 7 man others 7061. ## 8 man radio/television 2526. ## 9 man repairs 2905. ## 10 man retraining 930 ## 11 vrouw business 3195. ## 12 vrouw car (new) 2532. ## 13 vrouw car (used) 5814. ## 14 vrouw domestic appliances 1410. ## 15 vrouw education 2188. ## 16 vrouw furniture/equipment 2775. ## 17 vrouw others 11654. ## 18 vrouw radio/television 2401. ## 19 vrouw repairs 2126. ## 20 vrouw retraining 1758. men_set &lt;- men_woman %&gt;% filter(gender==&quot;man&quot;) women_set &lt;- men_woman %&gt;% filter(gender==&quot;vrouw&quot;) men_amounts &lt;- men_set$mean_amount names(men_amounts) &lt;- men_set$purpose women_amounts &lt;- women_set$mean_amount names(women_amounts) &lt;- women_set$purpose barplot(men_amounts, las=2, col=&quot;blue&quot;) barplot(women_amounts, las=2, col=&quot;pink&quot;) "],["functions-loops-and-conditional-statements-in-r.html", "4 Functions, loops and conditional statements in R 4.1 Writing functions in R 4.2 Loops 4.3 Conditional statements in R", " 4 Functions, loops and conditional statements in R 4.1 Writing functions in R number &lt;- 10 number_increased &lt;- number ^2 print(paste0(&quot;The result is: &quot;, number_increased)) ## [1] &quot;The result is: 100&quot; myFun &lt;- function(){ number &lt;- 10 number_increased &lt;- number ^2 return(print(paste0(&quot;The result is: &quot;, number_increased))) } myFun() ## [1] &quot;The result is: 100&quot; myFunVar &lt;- function(x){ number &lt;- x number_increased &lt;- number ^2 return(print(paste0(&quot;The result is: &quot;, number_increased))) } myFunVar(5) ## [1] &quot;The result is: 25&quot; myFunVarMulti &lt;- function(x,y){ number &lt;- x number_increased &lt;- number ^y return(print(paste0(&quot;The result is: &quot;, number_increased))) } myFunVarMulti(5, 3) ## [1] &quot;The result is: 125&quot; Character-function greetName &lt;- function(name){ return(print(paste0(&quot;Hello &quot;, name))) } greetName(&quot;Arie&quot;) ## [1] &quot;Hello Arie&quot; 4.2 Loops for(i in 1:5){ print(&quot;Hello&quot;) } ## [1] &quot;Hello&quot; ## [1] &quot;Hello&quot; ## [1] &quot;Hello&quot; ## [1] &quot;Hello&quot; ## [1] &quot;Hello&quot; for(i in 1:10){ print(2 * i) } ## [1] 2 ## [1] 4 ## [1] 6 ## [1] 8 ## [1] 10 ## [1] 12 ## [1] 14 ## [1] 16 ## [1] 18 ## [1] 20 4.3 Conditional statements in R a = 10 b = 20 if (a &gt; b){ print(&quot;A is larger than B&quot;) } else { print(&quot;That is not true&quot;) } ## [1] &quot;That is not true&quot; if (a &gt; b){ print(&quot;A is larger than B&quot;) } else if (a &lt; b) { print(&quot;A is smaller than B&quot;) } else { print(&quot;That is not true&quot;) } ## [1] &quot;A is smaller than B&quot; "],["data-visualization-in-ggplot.html", "5 Data visualization in ggplot 5.1 Installing and loading the required packages 5.2 Normal plots vs ggplot in R 5.3 Different types of visualizations with ggplot 5.4 Using multiple dimensions in ggplot 5.5 Making visualisations interactive with plotly 5.6 Experimenting multiple ways to display your data", " 5 Data visualization in ggplot 5.1 Installing and loading the required packages install.package(&quot;ggplot2&quot;) install.package(&quot;plotly&quot;) library(dplyr) library(readr) library(ggplot2) library(plotly) ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout Disable the scientific notation options(scipen = 999) Import the German dataset german_data_clean &lt;- read_csv(&quot;data/german_data_clean.csv&quot;) ## Rows: 1000 Columns: 21 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (13): checking_account, credit_history, purpose, savings, present_employ... ## dbl (8): duration_months, credit_amount, installment_rate, present_residenc... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 5.2 Normal plots vs ggplot in R #R plot(german_data_clean$age_years, german_data_clean$credit_amount) plot_1 &lt;- ggplot(data = german_data_clean, aes(x = age_years, y = credit_amount)) + geom_point() plot_1 plot_1 + geom_point() plot_1 + geom_smooth(model = lm) ## Warning: Ignoring unknown parameters: model ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; plot_1 + geom_rug(sides = &quot;bl&quot;) 5.3 Different types of visualizations with ggplot 10 bins plot_2 &lt;- ggplot(german_data_clean, aes(credit_amount)) plot_2 + geom_histogram(bins = 10) Bin width of 1000 plot_2 + geom_histogram(binwidth = 1000) Customizing the colours of your plot plot_2 + geom_histogram(binwidth = 1000, color=&quot;orange&quot;, fill=&quot;darkblue&quot;) Add fixed vertical lines to show add information about the distribution plot_2 + geom_density(kernel = &quot;gaussian&quot;, fill = &quot;gray&quot;) + geom_vline(aes(xintercept=mean(credit_amount)), color=&quot;blue&quot;, size=1, alpha = 0.4) + geom_vline(aes(xintercept=mean(credit_amount) + sd(credit_amount)), color=&quot;red&quot;, size=0.5, alpha = 0.4) + geom_vline(aes(xintercept=mean(credit_amount) - sd(credit_amount)), color=&quot;red&quot;, size=0.5, alpha = 0.4) + geom_vline(aes(xintercept=median(credit_amount)), color=&quot;green&quot;, size=4, alpha = 0.4) Scatterplots with multiple dimensions plot_3 &lt;- ggplot(german_data_clean, aes(x = purpose, y = age_years)) plot_3 + geom_boxplot() plot_3 + geom_violin() plot_3 + geom_jitter() plot_4 &lt;- ggplot(german_data_clean, aes(x = personal_status_sex, y = credit_amount)) plot_4 + geom_dotplot(binaxis = &quot;y&quot;, stackdir = &quot;center&quot;, binwidth = 250) plot_4 &lt;- ggplot(german_data_clean, aes(x = personal_status_sex, y = credit_amount)) plot_4 + geom_boxplot() plot_5 &lt;- ggplot(german_data_clean, aes(x = age_years, y = credit_amount)) plot_5 + geom_point() 5.4 Using multiple dimensions in ggplot plot_5 &lt;- ggplot(german_data_clean, aes(x = age_years, y = credit_amount)) plot_5 + geom_point(aes(size = duration_months, colour = purpose, shape = personal_status_sex)) Finalizing the visualisation with titles plot_5 &lt;- plot_5 + geom_point(aes(size = duration_months, colour = purpose, shape = personal_status_sex)) + ggtitle(&quot;Purposes for loans?&quot;) + xlab(&quot;Age&quot;) + ylab(&quot;Amount&quot;) + theme_minimal() 5.5 Making visualisations interactive with plotly library(plotly) ggplotly(plot_5) Another example plot_6 &lt;- ggplot(german_data_clean, aes(purpose, credit_amount)) + geom_bar(aes(fill = personal_status_sex), position = &quot;dodge&quot;, stat=&quot;identity&quot;) ggplotly(plot_6) Adding more customization plotly_plot_6 &lt;- plot_6 + geom_bar(aes(fill = personal_status_sex), position = &quot;dodge&quot;, stat=&quot;identity&quot;) ggplotly(plotly_plot_6) ## Warning: &#39;bar&#39; objects don&#39;t have these attributes: &#39;mode&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;meta&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;uirevision&#39;, &#39;x&#39;, &#39;x0&#39;, &#39;dx&#39;, &#39;y&#39;, &#39;y0&#39;, &#39;dy&#39;, &#39;xperiod&#39;, &#39;yperiod&#39;, &#39;xperiod0&#39;, &#39;yperiod0&#39;, &#39;xperiodalignment&#39;, &#39;yperiodalignment&#39;, &#39;text&#39;, &#39;texttemplate&#39;, &#39;hovertext&#39;, &#39;hovertemplate&#39;, &#39;textposition&#39;, &#39;insidetextanchor&#39;, &#39;textangle&#39;, &#39;textfont&#39;, &#39;insidetextfont&#39;, &#39;outsidetextfont&#39;, &#39;constraintext&#39;, &#39;cliponaxis&#39;, &#39;orientation&#39;, &#39;base&#39;, &#39;offset&#39;, &#39;width&#39;, &#39;marker&#39;, &#39;offsetgroup&#39;, &#39;alignmentgroup&#39;, &#39;selected&#39;, &#39;unselected&#39;, &#39;r&#39;, &#39;t&#39;, &#39;_deprecated&#39;, &#39;error_x&#39;, &#39;error_y&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;xaxis&#39;, &#39;yaxis&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;metasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;textsrc&#39;, &#39;texttemplatesrc&#39;, &#39;hovertextsrc&#39;, &#39;hovertemplatesrc&#39;, &#39;textpositionsrc&#39;, &#39;basesrc&#39;, &#39;offsetsrc&#39;, &#39;widthsrc&#39;, &#39;rsrc&#39;, &#39;tsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; ## Warning: &#39;bar&#39; objects don&#39;t have these attributes: &#39;mode&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;meta&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;uirevision&#39;, &#39;x&#39;, &#39;x0&#39;, &#39;dx&#39;, &#39;y&#39;, &#39;y0&#39;, &#39;dy&#39;, &#39;xperiod&#39;, &#39;yperiod&#39;, &#39;xperiod0&#39;, &#39;yperiod0&#39;, &#39;xperiodalignment&#39;, &#39;yperiodalignment&#39;, &#39;text&#39;, &#39;texttemplate&#39;, &#39;hovertext&#39;, &#39;hovertemplate&#39;, &#39;textposition&#39;, &#39;insidetextanchor&#39;, &#39;textangle&#39;, &#39;textfont&#39;, &#39;insidetextfont&#39;, &#39;outsidetextfont&#39;, &#39;constraintext&#39;, &#39;cliponaxis&#39;, &#39;orientation&#39;, &#39;base&#39;, &#39;offset&#39;, &#39;width&#39;, &#39;marker&#39;, &#39;offsetgroup&#39;, &#39;alignmentgroup&#39;, &#39;selected&#39;, &#39;unselected&#39;, &#39;r&#39;, &#39;t&#39;, &#39;_deprecated&#39;, &#39;error_x&#39;, &#39;error_y&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;xaxis&#39;, &#39;yaxis&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;metasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;textsrc&#39;, &#39;texttemplatesrc&#39;, &#39;hovertextsrc&#39;, &#39;hovertemplatesrc&#39;, &#39;textpositionsrc&#39;, &#39;basesrc&#39;, &#39;offsetsrc&#39;, &#39;widthsrc&#39;, &#39;rsrc&#39;, &#39;tsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; ## Warning: &#39;bar&#39; objects don&#39;t have these attributes: &#39;mode&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;meta&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;uirevision&#39;, &#39;x&#39;, &#39;x0&#39;, &#39;dx&#39;, &#39;y&#39;, &#39;y0&#39;, &#39;dy&#39;, &#39;xperiod&#39;, &#39;yperiod&#39;, &#39;xperiod0&#39;, &#39;yperiod0&#39;, &#39;xperiodalignment&#39;, &#39;yperiodalignment&#39;, &#39;text&#39;, &#39;texttemplate&#39;, &#39;hovertext&#39;, &#39;hovertemplate&#39;, &#39;textposition&#39;, &#39;insidetextanchor&#39;, &#39;textangle&#39;, &#39;textfont&#39;, &#39;insidetextfont&#39;, &#39;outsidetextfont&#39;, &#39;constraintext&#39;, &#39;cliponaxis&#39;, &#39;orientation&#39;, &#39;base&#39;, &#39;offset&#39;, &#39;width&#39;, &#39;marker&#39;, &#39;offsetgroup&#39;, &#39;alignmentgroup&#39;, &#39;selected&#39;, &#39;unselected&#39;, &#39;r&#39;, &#39;t&#39;, &#39;_deprecated&#39;, &#39;error_x&#39;, &#39;error_y&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;xaxis&#39;, &#39;yaxis&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;metasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;textsrc&#39;, &#39;texttemplatesrc&#39;, &#39;hovertextsrc&#39;, &#39;hovertemplatesrc&#39;, &#39;textpositionsrc&#39;, &#39;basesrc&#39;, &#39;offsetsrc&#39;, &#39;widthsrc&#39;, &#39;rsrc&#39;, &#39;tsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; ## Warning: &#39;bar&#39; objects don&#39;t have these attributes: &#39;mode&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;meta&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;uirevision&#39;, &#39;x&#39;, &#39;x0&#39;, &#39;dx&#39;, &#39;y&#39;, &#39;y0&#39;, &#39;dy&#39;, &#39;xperiod&#39;, &#39;yperiod&#39;, &#39;xperiod0&#39;, &#39;yperiod0&#39;, &#39;xperiodalignment&#39;, &#39;yperiodalignment&#39;, &#39;text&#39;, &#39;texttemplate&#39;, &#39;hovertext&#39;, &#39;hovertemplate&#39;, &#39;textposition&#39;, &#39;insidetextanchor&#39;, &#39;textangle&#39;, &#39;textfont&#39;, &#39;insidetextfont&#39;, &#39;outsidetextfont&#39;, &#39;constraintext&#39;, &#39;cliponaxis&#39;, &#39;orientation&#39;, &#39;base&#39;, &#39;offset&#39;, &#39;width&#39;, &#39;marker&#39;, &#39;offsetgroup&#39;, &#39;alignmentgroup&#39;, &#39;selected&#39;, &#39;unselected&#39;, &#39;r&#39;, &#39;t&#39;, &#39;_deprecated&#39;, &#39;error_x&#39;, &#39;error_y&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;xaxis&#39;, &#39;yaxis&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;metasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;textsrc&#39;, &#39;texttemplatesrc&#39;, &#39;hovertextsrc&#39;, &#39;hovertemplatesrc&#39;, &#39;textpositionsrc&#39;, &#39;basesrc&#39;, &#39;offsetsrc&#39;, &#39;widthsrc&#39;, &#39;rsrc&#39;, &#39;tsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; plotly_plot_5 &lt;- plot_5 + geom_point(aes(size = duration_months, colour = purpose, shape = personal_status_sex)) + ggtitle(&quot;Purposes for loans&quot;) + xlab(&quot;Age&quot;) + ylab(&quot;Amount&quot;) + theme( panel.grid.major.x = element_line(colour = &quot;#eeeeee&quot;), panel.grid.minor.x = element_line(colour = &quot;#000000&quot;), panel.background = element_rect(fill = NA) ) ggplotly(plotly_plot_5) 5.6 Experimenting multiple ways to display your data plot &lt;- ggplot(german_data_clean, aes(x = savings, y = purpose)) + geom_jitter(aes(color = factor(response), shape = personal_status_sex, size = credit_amount), alpha = 0.6) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) #+ theme_minimal() ## List of 93 ## $ line :List of 6 ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ lineend : chr &quot;butt&quot; ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ rect :List of 5 ## ..$ fill : chr &quot;white&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_rect&quot; &quot;element&quot; ## $ text :List of 11 ## ..$ family : chr &quot;&quot; ## ..$ face : chr &quot;plain&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 11 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : num 0 ## ..$ lineheight : num 0.9 ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ title : NULL ## $ aspect.ratio : NULL ## $ axis.title : NULL ## $ axis.title.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.75points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.75points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.bottom : NULL ## $ axis.title.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.75points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.y.left : NULL ## $ axis.title.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.75points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey30&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.2points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.2points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.bottom : NULL ## $ axis.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 1 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.2points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.y.left : NULL ## $ axis.text.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.2points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.ticks : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.ticks.x : NULL ## $ axis.ticks.x.top : NULL ## $ axis.ticks.x.bottom : NULL ## $ axis.ticks.y : NULL ## $ axis.ticks.y.left : NULL ## $ axis.ticks.y.right : NULL ## $ axis.ticks.length : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ axis.ticks.length.x : NULL ## $ axis.ticks.length.x.top : NULL ## $ axis.ticks.length.x.bottom: NULL ## $ axis.ticks.length.y : NULL ## $ axis.ticks.length.y.left : NULL ## $ axis.ticks.length.y.right : NULL ## $ axis.line : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.line.x : NULL ## $ axis.line.x.top : NULL ## $ axis.line.x.bottom : NULL ## $ axis.line.y : NULL ## $ axis.line.y.left : NULL ## $ axis.line.y.right : NULL ## $ legend.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing.x : NULL ## $ legend.spacing.y : NULL ## $ legend.key : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.key.size : &#39;simpleUnit&#39; num 1.2lines ## ..- attr(*, &quot;unit&quot;)= int 3 ## $ legend.key.height : NULL ## $ legend.key.width : NULL ## $ legend.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.text.align : NULL ## $ legend.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.title.align : NULL ## $ legend.position : chr &quot;right&quot; ## $ legend.direction : NULL ## $ legend.justification : chr &quot;center&quot; ## $ legend.box : NULL ## $ legend.box.just : NULL ## $ legend.box.margin : &#39;margin&#39; num [1:4] 0cm 0cm 0cm 0cm ## ..- attr(*, &quot;unit&quot;)= int 1 ## $ legend.box.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.box.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.border : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.spacing : &#39;simpleUnit&#39; num 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.spacing.x : NULL ## $ panel.spacing.y : NULL ## $ panel.grid :List of 6 ## ..$ colour : chr &quot;grey92&quot; ## ..$ size : NULL ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major : NULL ## $ panel.grid.minor :List of 6 ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.5 ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major.x : NULL ## $ panel.grid.major.y : NULL ## $ panel.grid.minor.x : NULL ## $ panel.grid.minor.y : NULL ## $ panel.ontop : logi FALSE ## $ plot.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ plot.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.title.position : chr &quot;panel&quot; ## $ plot.subtitle :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : num 1 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 5.5points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption.position : chr &quot;panel&quot; ## $ plot.tag :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.tag.position : chr &quot;topleft&quot; ## $ plot.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ strip.background.x : NULL ## $ strip.background.y : NULL ## $ strip.placement : chr &quot;inside&quot; ## $ strip.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey10&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 4.4points 4.4points 4.4points 4.4points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.text.x : NULL ## $ strip.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.switch.pad.grid : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.switch.pad.wrap : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.text.y.left :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;theme&quot; &quot;gg&quot; ## - attr(*, &quot;complete&quot;)= logi TRUE ## - attr(*, &quot;validate&quot;)= logi TRUE ggplotly(plot) Credit history vs. credit amount ggplot() + geom_density(data=german_data_clean, aes(x=credit_amount, group=job, fill=job),alpha=0.5, adjust=2) 5.6.1 Using different themes library(ggplot2) theme_set(theme_classic()) # Histogram on a Categorical variable plot &lt;- ggplot(german_data_clean, aes(purpose)) plot + geom_bar(aes(fill=job), width = 0.5) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) + labs(title=&quot;Purpose per job&quot;) german_data_clean &lt;- german_data_clean %&gt;% mutate(geslacht = ifelse(personal_status_sex != &quot;female : divorced/separated/married&quot;, &quot;man&quot;, &quot;vrouw&quot;)) library(ggthemes) g &lt;- ggplot(german_data_clean, aes(purpose, credit_amount)) g + geom_boxplot(aes(fill=factor(geslacht))) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) german_data_clean &lt;- german_data_clean %&gt;% mutate(geslacht = ifelse(personal_status_sex != &quot;female : divorced/separated/married&quot;, &quot;man&quot;, &quot;vrouw&quot;)) library(ggthemes) g &lt;- ggplot(german_data_clean, aes(purpose, credit_amount)) g + geom_boxplot(aes(fill=factor(savings))) + theme(axis.text.x = element_text(angle=65, vjust=0.6)) "],["working-with-external-data.html", "6 Working with external data 6.1 Externe data", " 6 Working with external data Extra kolommen, features, aanmaken die we kunnen gebruiken voor Machine Learning Zie slides: 6.1 Externe data Zie slides, csv-s downloaden van de website open data CBS Dataset importeren diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Eigenschappen van de dataset bekijken str(diensten) ## spec_tbl_df [10,375 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ ID : num [1:10375] 0 1 2 3 4 5 6 7 8 9 ... ## $ CPA2008 : chr [1:10375] &quot;T001157&quot; &quot;T001157&quot; &quot;T001157&quot; &quot;T001157&quot; ... ## $ Perioden : chr [1:10375] &quot;2002KW04&quot; &quot;2003KW01&quot; &quot;2003KW02&quot; &quot;2003KW03&quot; ... ## $ Prijsindex_1 : chr [1:10375] &quot;.&quot; &quot;.&quot; &quot;.&quot; &quot;.&quot; ... ## $ Kwartaalmutaties_2: chr [1:10375] &quot;.&quot; &quot;.&quot; &quot;.&quot; &quot;.&quot; ... ## $ Jaarmutaties_3 : chr [1:10375] &quot;.&quot; &quot;.&quot; &quot;.&quot; &quot;.&quot; ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. ID = col_double(), ## .. CPA2008 = col_character(), ## .. Perioden = col_character(), ## .. Prijsindex_1 = col_character(), ## .. Kwartaalmutaties_2 = col_character(), ## .. Jaarmutaties_3 = col_character() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; Prijs-eigenschappen zijn characters Het best om alles onder elkaar te zetten. Hiermee converteren we alles in de juiste datatypes en in de juiste volgorden: * id’s als eerst * vervolgd door character, date- datatypes * uiteindelijk de cijfers library(dplyr) diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. id_cols &lt;- c(&quot;ID&quot;) character_cols &lt;- c(&quot;CPA2008&quot;, &quot;Perioden&quot;) numeric_cols &lt;- c(&quot;Prijsindex_1&quot;, &quot;Kwartaalmutaties_2&quot;, &quot;Jaarmutaties_3&quot;) diensten_clean &lt;- diensten %&gt;% select(id_cols, numeric_cols, character_cols) %&gt;% mutate_at(id_cols, funs(as.character)) %&gt;% mutate_at(character_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.numeric)) ## Note: Using an external vector in selections is ambiguous. ## ℹ Use `all_of(id_cols)` instead of `id_cols` to silence this message. ## ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. ## This message is displayed once per session. ## Note: Using an external vector in selections is ambiguous. ## ℹ Use `all_of(numeric_cols)` instead of `numeric_cols` to silence this message. ## ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. ## This message is displayed once per session. ## Note: Using an external vector in selections is ambiguous. ## ℹ Use `all_of(character_cols)` instead of `character_cols` to silence this message. ## ℹ See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. ## This message is displayed once per session. ## Warning: `funs()` was deprecated in dplyr 0.8.0. ## Please use a list of either functions or lambdas: ## ## # Simple named list: ## list(mean = mean, median = median) ## ## # Auto named with `tibble::lst()`: ## tibble::lst(mean, median) ## ## # Using lambdas ## list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion Punten veranderen in NA waarden. Daar kunnen we niks mee. Laten we onze pipeline aanpassen: library(dplyr) diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. id_cols &lt;- c(&quot;ID&quot;) character_cols &lt;- c(&quot;CPA2008&quot;, &quot;Perioden&quot;) numeric_cols &lt;- c(&quot;Prijsindex_1&quot;, &quot;Kwartaalmutaties_2&quot;, &quot;Jaarmutaties_3&quot;) diensten_clean &lt;- diensten %&gt;% select(id_cols, character_cols, numeric_cols) %&gt;% mutate_at(character_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.numeric)) %&gt;% filter(!is.na(Prijsindex_1)) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion Hoe gaan we met de kwartalen te werk? Hier zijn handige packages voor in R: * lubridate * zoo (gevonden via Google) library(zoo) ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric Experimenteren: Hoe ziet het er nu uit? head(diensten_clean$Perioden) ## [1] &quot;2006KW01&quot; &quot;2006KW02&quot; &quot;2006KW03&quot; &quot;2006KW04&quot; &quot;2006JJ00&quot; &quot;2007KW01&quot; Functie in het zoo -package. Pakt de eerste datum van het kwartaal head(as.Date(as.yearqtr(diensten_clean$Perioden, format = &quot;%YKW0%q&quot;))) ## [1] &quot;2006-01-01&quot; &quot;2006-04-01&quot; &quot;2006-07-01&quot; &quot;2006-10-01&quot; NA ## [6] &quot;2007-01-01&quot; We willen een grafiek op een gelijk aggregatie-niveau: per kwartaal. We willen de jaarlijkse data dus niet hebben. Hiervoor worden ook de NA waarden gegenereerd. Laten de de pipeline weer aanpassen: library(dplyr) library(zoo) diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. id_cols &lt;- c(&quot;ID&quot;) character_cols &lt;- c(&quot;CPA2008&quot;, &quot;Perioden&quot;) numeric_cols &lt;- c(&quot;Prijsindex_1&quot;, &quot;Kwartaalmutaties_2&quot;, &quot;Jaarmutaties_3&quot;) diensten_clean &lt;- diensten %&gt;% select(id_cols, character_cols, numeric_cols) %&gt;% mutate_at(character_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.numeric)) %&gt;% mutate(Perioden = as.Date(as.yearqtr(Perioden, format = &quot;%YKW0%q&quot;))) %&gt;% filter(!is.na(c(Prijsindex_1))) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion Zijn de datatypen goed? str(diensten_clean) ## tibble [6,769 × 6] (S3: tbl_df/tbl/data.frame) ## $ ID : num [1:6769] 16 17 18 19 20 21 22 23 24 25 ... ## $ CPA2008 : chr [1:6769] &quot;T001157&quot; &quot;T001157&quot; &quot;T001157&quot; &quot;T001157&quot; ... ## $ Perioden : Date[1:6769], format: &quot;2006-01-01&quot; &quot;2006-04-01&quot; ... ## $ Prijsindex_1 : num [1:6769] 91.5 91.6 92.3 93 92.1 93.4 93.9 94.3 94.9 94.1 ... ## $ Kwartaalmutaties_2: num [1:6769] NA 0.1 0.8 0.8 NA 0.4 0.6 0.4 0.7 NA ... ## $ Jaarmutaties_3 : num [1:6769] NA NA NA NA NA 2.1 2.6 2.1 2.1 2.2 ... Ja. Misschien toch handig om de jaar en kwartaal data te hebben? Standaard ingebouwde functies in R: head(months(diensten_clean$Perioden)) ## [1] &quot;januari&quot; &quot;april&quot; &quot;juli&quot; &quot;oktober&quot; NA &quot;januari&quot; De enige relevante in dit geval head(quarters(diensten_clean$Perioden)) ## [1] &quot;Q1&quot; &quot;Q2&quot; &quot;Q3&quot; &quot;Q4&quot; &quot;QNA&quot; &quot;Q1&quot; Jaar gaat net iets anders: head(format(as.Date(diensten_clean$Perioden), &quot;%Y&quot;)) ## [1] &quot;2006&quot; &quot;2006&quot; &quot;2006&quot; &quot;2006&quot; NA &quot;2007&quot; We gaan onze pipeline weer aanpassen library(dplyr) library(zoo) diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. id_cols &lt;- c(&quot;ID&quot;) character_cols &lt;- c(&quot;CPA2008&quot;, &quot;Perioden&quot;) numeric_cols &lt;- c(&quot;Prijsindex_1&quot;, &quot;Kwartaalmutaties_2&quot;, &quot;Jaarmutaties_3&quot;) diensten_clean &lt;- diensten %&gt;% select(id_cols, character_cols, numeric_cols) %&gt;% mutate_at(character_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.numeric)) %&gt;% mutate(Perioden = as.Date(as.yearqtr(Perioden, format = &quot;%YKW0%q&quot;))) %&gt;% mutate(jaar = format(as.Date(Perioden), &quot;%Y&quot;)) %&gt;% mutate(kwartaal = quarters(Perioden)) %&gt;% filter(!is.na(Prijsindex_1)) %&gt;% filter(!is.na(Perioden)) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion Dataset begint er al beter uit te zien. Nu nog de juiste titels van de functies. Staat beschreven in de metadata: diensten_mapping &lt;- read_delim(&quot;data/metadata_diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE, skip = 11) ## Rows: 210 Columns: 3 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (3): Key, Title, Description ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Bekijken of ze bij elkaar voor komen diensten_mapping$Key %in% diensten_clean$CPA2008 ## Warning: One or more parsing issues, see `problems()` for detailsoeveel? sum(diensten_mapping$Key %in% diensten_clean$CPA2008) ## [1] 105 “Match” functie toepassen in R diensten_clean$titel &lt;- diensten_mapping$Title[match(diensten_clean$CPA2008, diensten_mapping$Key)] Nog niet zo heel netjes head(diensten_clean$titel) ## [1] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; ## [3] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; ## [5] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; “Dienstenprijsindex (DPI)” hebbenwe niet nodig –&gt; is een samenvatting. Code voor de titel willen we graag weghalen 1 lossen we straks op in de pipeline met filteren 2 Gaan we aan de hand van regular expressions en R eruit halen head(gsub(&#39;[[:digit:]]+ &#39;, &#39;&#39;, diensten_clean$titel)) ## [1] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; ## [3] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; ## [5] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; Tijd om onze pipeline weer bij te werken: We gaan de volgende blokken toevoegen: diensten_mapping &lt;- read_delim(&quot;data/metadata_diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE, skip = 11) ## Rows: 210 Columns: 3 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (3): Key, Title, Description ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. diensten_clean$titel &lt;- diensten_mapping$Title[match(diensten_clean$CPA2008, diensten_mapping$Key)] ## Warning: One or more parsing issues, see `problems()` for details head(gsub(&#39;[[:digit:]]+&#39;, &#39;&#39;, diensten_clean$titel)) ## [1] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; ## [3] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; ## [5] &quot;Dienstenprijsindex (DPI)&quot; &quot;Dienstenprijsindex (DPI)&quot; library(dplyr) library(zoo) diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. diensten_mapping &lt;- read_delim(&quot;data/metadata_diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE, skip = 11) ## Rows: 210 Columns: 3 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (3): Key, Title, Description ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. id_cols &lt;- c(&quot;ID&quot;) character_cols &lt;- c(&quot;CPA2008&quot;, &quot;Perioden&quot;) numeric_cols &lt;- c(&quot;Prijsindex_1&quot;, &quot;Kwartaalmutaties_2&quot;, &quot;Jaarmutaties_3&quot;) diensten_clean &lt;- diensten %&gt;% select(id_cols, character_cols, numeric_cols) %&gt;% mutate_at(character_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.numeric)) %&gt;% mutate(Perioden = as.Date(as.yearqtr(Perioden, format = &quot;%YKW0%q&quot;))) %&gt;% mutate(jaar = format(as.Date(Perioden), &quot;%Y&quot;)) %&gt;% mutate(kwartaal = quarters(Perioden)) %&gt;% mutate(titel = diensten_mapping$Title[match(CPA2008, diensten_mapping$Key)]) %&gt;% mutate(titel = gsub(&#39;[[:digit:]]+&#39;, &#39;&#39;, titel)) %&gt;% filter(titel != &quot;Dienstenprijsindex (DPI)&quot;) %&gt;% filter(!is.na(c(Prijsindex_1))) %&gt;% filter(!is.na(Perioden)) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning: One or more parsing issues, see `problems()` for details write.csv(diensten_clean, &quot;output_diensten.csv&quot;) Laten we de data een final touch geven: library(dplyr) library(zoo) diensten &lt;- read_delim(&quot;data/diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) ## Rows: 10375 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (5): CPA2008, Perioden, Prijsindex_1, Kwartaalmutaties_2, Jaarmutaties_3 ## dbl (1): ID ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. diensten_mapping &lt;- read_delim(&quot;data/metadata_diensten.csv&quot;, &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE, skip = 11) ## Rows: 210 Columns: 3 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;;&quot; ## chr (3): Key, Title, Description ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. id_cols &lt;- c(&quot;ID&quot;) character_cols &lt;- c(&quot;CPA2008&quot;, &quot;Perioden&quot;) numeric_cols &lt;- c(&quot;Prijsindex_1&quot;, &quot;Kwartaalmutaties_2&quot;, &quot;Jaarmutaties_3&quot;) diensten_clean &lt;- diensten %&gt;% mutate_at(character_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.character)) %&gt;% mutate_at(numeric_cols, funs(as.numeric)) %&gt;% mutate(Perioden = as.Date(as.yearqtr(Perioden, format = &quot;%YKW0%q&quot;))) %&gt;% mutate(jaar = format(as.Date(Perioden), &quot;%Y&quot;)) %&gt;% mutate(kwartaal = quarters(Perioden)) %&gt;% mutate(titel = diensten_mapping$Title[match(CPA2008, diensten_mapping$Key)]) %&gt;% mutate(titel = gsub(&#39;[[:digit:]]+&#39;, &#39;&#39;, titel)) %&gt;% filter(titel != &quot;Dienstenprijsindex (DPI)&quot;) %&gt;% filter(!is.na(c(Prijsindex_1))) %&gt;% filter(!is.na(Perioden)) %&gt;% rename_all(.funs = funs(tolower(.))) %&gt;% # Alle kolommen naar lowercase select(-c(&quot;cpa2008&quot;, &quot;jaarmutaties_3&quot;)) %&gt;% # Kolommen verwijderen die niet meer van belang zijn rename(prijsindex = prijsindex_1) %&gt;% rename(kwartaalmutaties = kwartaalmutaties_2) %&gt;% select(id, perioden, jaar, kwartaal, titel, prijsindex, kwartaalmutaties) ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning in mask$eval_all_mutate(quo): NAs introduced by coercion ## Warning: One or more parsing issues, see `problems()` for details Basic visualiseren voor 1 type dienst Welke smaken zijn er allemaal unique(diensten_clean$titel) ## [1] &quot;H Vervoer en opslag&quot; ## [2] &quot; Vervoer te land en via pijpleidingen&quot; ## [3] &quot; Goederenwegvervoer en verhuizingen&quot; ## [4] &quot; Goederenvervoer over de weg&quot; ## [5] &quot; Goederenvervoer met koelauto&#39;s&quot; ## [6] &quot;A Goederenvervoer met tankauto&#39;s ..&quot; ## [7] &quot; Goederenvervoer met containers..&quot; ## [8] &quot; Goederenvervoer van droge bulk..&quot; ## [9] &quot;B Ander vervoer over de weg&quot; ## [10] &quot; Verhuizingen&quot; ## [11] &quot; Vervoer over water&quot; ## [12] &quot; Zee- en kustvaart, personenvervoer&quot; ## [13] &quot; Zee- en kustvaart, goederenvervoer&quot; ## [14] &quot; Verhuur van zeevaartuigen&quot; ## [15] &quot; Binnenvaart, personenvervoer&quot; ## [16] &quot; Binnenvaart, goederenvervoer&quot; ## [17] &quot; Luchtvaart&quot; ## [18] &quot; Personenvervoer door de lucht&quot; ## [19] &quot; Opslag en vervoerondersteuning&quot; ## [20] &quot; Opslag&quot; ## [21] &quot; Opslag in koelhuizen&quot; ## [22] &quot; Bulkopslag van vloeistoffen of..&quot; ## [23] &quot;A Andere opslag&quot; ## [24] &quot; Vrachtbehandeling&quot; ## [25] &quot; Andere post- en koeriersdiensten&quot; ## [26] &quot; Multimodale koeriers&quot; ## [27] &quot;A Koeriers&quot; ## [28] &quot;J Informatie en communicatie&quot; ## [29] &quot; Computeradvisering&quot; ## [30] &quot;L Exploitatie en handel onroerend goed&quot; ## [31] &quot; Exploitatie en handel onroerend goed&quot; ## [32] &quot; Verhuur/exploitatie onroerend goed&quot; ## [33] &quot; Verhuur en exploitatie van eigen..&quot; ## [34] &quot; Verhuur en exploitatie van..&quot; ## [35] &quot; Bemiddeling in en beheer van..&quot; ## [36] &quot; Bemiddeling in onroerend goed..&quot; ## [37] &quot; Makelaarsdiensten in woningen..&quot; ## [38] &quot; Makelaarsdiensten bedrijfspanden&quot; ## [39] &quot; Taxatie van onroerend goed..&quot; ## [40] &quot;A Taxatie particulier vastgoed&quot; ## [41] &quot;B Taxatie bedrijfsmatig vastgoed&quot; ## [42] &quot;M Vrije beroepen en wetenschappelijke..&quot; ## [43] &quot; Rechtskundige en boekhoudkundige..&quot; ## [44] &quot; Rechtskundige diensten&quot; ## [45] &quot;A Rechtskundige diensten advocatuur&quot; ## [46] &quot; Notariële diensten&quot; ## [47] &quot;A Familiepraktijk&quot; ## [48] &quot;B Onroerendgoedpraktijk&quot; ## [49] &quot;C Ondernemingspraktijk&quot; ## [50] &quot; Accountants, boekhouders en..&quot; ## [51] &quot;A Financiële audits en advisering..&quot; ## [52] &quot;A Financiële audits door ..&quot; ## [53] &quot;A Financiële advisering door..&quot; ## [54] &quot; Boekhoudkundige diensten&quot; ## [55] &quot;A Financiële administratie&quot; ## [56] &quot; Andere boekhoudkundige diensten&quot; ## [57] &quot; Belastingconsulenten&quot; ## [58] &quot; Advies inzake bedrijfsbeheer; ..&quot; ## [59] &quot; Advies inzake bedrijfsbeheer&quot; ## [60] &quot; Architecten en ingenieurs; ..&quot; ## [61] &quot; Architecten, ingenieurs ea ..&quot; ## [62] &quot; Architecten&quot; ## [63] &quot; Architecten: gebouwen&quot; ## [64] &quot; Architecten: woningen&quot; ## [65] &quot; Architecten: andere gebouwen&quot; ## [66] &quot;A Stadsplanning, landinrichting ..&quot; ## [67] &quot; Ingenieurs en aanverwante ..&quot; ## [68] &quot; Ingenieurs&quot; ## [69] &quot; Ingenieurs: bouwprojecten&quot; ## [70] &quot; Ingenieurs: energieprojecten&quot; ## [71] &quot; Ingenieurs: vervoersprojecten&quot; ## [72] &quot; Ingenieurs: waterbouw-, ..&quot; ## [73] &quot; Ingenieurs: industrieprojecten&quot; ## [74] &quot; Projectbeheer bij bouwprojecten&quot; ## [75] &quot; Technische testen en toetsen&quot; ## [76] &quot; Reclame en marktonderzoek&quot; ## [77] &quot; Reclame&quot; ## [78] &quot; Reclamebureaus&quot; ## [79] &quot; Markt- en opinieonderzoek&quot; ## [80] &quot;N Administratieve en ondersteunende ..&quot; ## [81] &quot; Verhuur en lease&quot; ## [82] &quot; Lease personen- en bestelauto&#39;s&quot; ## [83] &quot; Arbeidsbemiddeling en personeels- ..&quot; ## [84] &quot; Uitzendbureaus&quot; ## [85] &quot; Beveiligings- en opsporingsdiensten&quot; ## [86] &quot; Particuliere beveiliging&quot; ## [87] &quot; Diensten in verband met beveiliging&quot; ## [88] &quot; Diensten in verband met gebouwen..&quot; ## [89] &quot; Reiniging&quot; diensten_fin &lt;- diensten_clean %&gt;% filter(titel == &quot;A Financiële audits en advisering..&quot;) Plot een simpele barplot met ggplot library(ggplot2) library(plotly) p &lt;- ggplot(data=diensten_fin, aes(x=perioden, y=prijsindex)) + geom_bar(stat=&quot;identity&quot;) ggplotly(p) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> 11df9209b85116874a085dfb27c708001037f353
